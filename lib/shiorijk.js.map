{"version":3,"sources":["shiorijk.coffee","shiorijk-container.coffee","shiorijk-shiori-parser.coffee"],"names":[],"mappings":"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","file":"shiorijk.js","sourceRoot":"/source/","sourcesContent":["### (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 ###\n\nShioriJK = {}\n\nif module? and module.exports?\n\tmodule.exports = ShioriJK\n","Function::property = (properties) ->\n\tfor property, descriptions of properties\n\t\tObject.defineProperty @prototype, property, descriptions\n\nShioriJK.Message = {}\n\n# SHIORI Request Message Container\nclass ShioriJK.Message.Request\n\t# initialize inner containers\n\t# @param options [Hash]\n\t# @option options [Boolean] no_prepare do not prepare RequestLine and Headers by the constructor\n\tconstructor : (options) ->\n\t\tunless options? and options.no_prepare\n\t\t\t@request_line = new ShioriJK.RequestLine()\n\t\t\t@headers = new ShioriJK.Headers.Request()\n\t# @property [ShioriJK.RequestLine] RequestLine Container\n\trequest_line: null\n\t# @property [ShioriJK.Headers.Request] Headers Container\n\theaders: null\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\t@request_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Response Message Container\nclass ShioriJK.Message.Response\n\t# initialize inner containers\n\t# @param options [Hash]\n\t# @option options [Boolean] no_prepare do not prepare StatusLine and Headers by the constructor\n\tconstructor : (options) ->\n\t\tunless options? and options.no_prepare\n\t\t\t@status_line = new ShioriJK.StatusLine()\n\t\t\t@headers = new ShioriJK.Headers.Response()\n\t# @property [ShioriJK.RequestLine] StatusLine Container\n\tstatus_line: null\n\t# @property [ShioriJK.Headers.Request] Headers Container\n\theaders: null\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\t@status_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Request Message's RequestLine Container\nclass ShioriJK.RequestLine\n\tconstructor : ->\n\t\t@arguments = {}\n\t# @property [String] request method\n\tmethod: null\n\t# @property [String] protocol\n\tprotocol: null\n\t# @property [String] version\n\tversion: null\n\t@property\n\t\tmethod :\n\t\t\tget : -> @arguments.method\n\t\t\tset : (method) ->\n\t\t\t\tif method? and @version?\n\t\t\t\t\t@validate_method_version method, @version\n\t\t\t\telse if method?\n\t\t\t\t\tswitch method\n\t\t\t\t\t\twhen 'GET', 'NOTIFY', 'GET Version', 'GET Sentence', 'GET Word', 'GET Status', 'TEACH', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'TRANSLATE Sentence'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow 'Invalid protocol method : ' + method\n\t\t\t\t@arguments.method = method\n\t\tprotocol :\n\t\t\tget : -> @arguments.protocol\n\t\t\tset : (protocol) ->\n\t\t\t\tif protocol? and protocol != 'SHIORI'\n\t\t\t\t\tthrow 'Invalid protocol : ' + protocol\n\t\t\t\t@arguments.protocol = protocol\n\t\tversion :\n\t\t\tget : -> @arguments.version\n\t\t\tset : (version) ->\n\t\t\t\tif @method? and version?\n\t\t\t\t\t@validate_method_version @method, version\n\t\t\t\telse if version?\n\t\t\t\t\tswitch version\n\t\t\t\t\t\twhen '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow 'Invalid protocol version : ' + version\n\t\t\t\t@arguments.version = version\n\t# validate\n\t# @param method [String] method name == 'SHIORI'\n\t# @param version [Number] version\n\t# @throw [String] if invalid\n\tvalidate_method_version : (method, version) ->\n\t\tis_valid = false\n\t\tswitch version\n\t\t\twhen '2.0'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET Version', 'NOTIFY OwnerGhostName', 'GET Sentence', 'GET Word', 'GET Status'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.2'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET Sentence'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.3'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'NOTIFY OtherGhostName', 'GET Sentence'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.4'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'TEACH'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.5'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET String'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.6' # spec is unknown\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET Sentence', 'GET Status', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'GET Version', 'TRANSLATE Sentence'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '3.0'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET', 'NOTIFY'\n\t\t\t\t\t\tis_valid = true\n\t\tunless is_valid\n\t\t\tthrow 'Invalid protocol method and version : ' + method + ' SHIORI/' + version\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\t\"#{@method} #{@protocol}/#{@version}\"\n\n# SHIORI Response Message's StatusLine Container\nclass ShioriJK.StatusLine\n\tconstructor : ->\n\t\t@arguments = {protocol: 'SHIORI'}\n\t# @property [String] status code\n\tcode: null\n\t# @property [String] protocol\n\tprotocol: null\n\t# @property [String] version\n\tversion: null\n\t@property\n\t\tcode :\n\t\t\tget : -> @arguments.code\n\t\t\tset : (code) ->\n\t\t\t\tif code? and not @message[code]?\n\t\t\t\t\tthrow 'Invalid response code : ' + code\n\t\t\t\t@arguments.code = code\n\t\tprotocol :\n\t\t\tget : -> @arguments.protocol\n\t\t\tset : (protocol) ->\n\t\t\t\tif protocol? and protocol != 'SHIORI'\n\t\t\t\t\tthrow 'Invalid protocol : ' + protocol\n\t\t\t\t@arguments.protocol = protocol\n\t\tversion :\n\t\t\tget : -> @arguments.version\n\t\t\tset : (version) ->\n\t\t\t\tif version?\n\t\t\t\t\tswitch version\n\t\t\t\t\t\twhen '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow 'Invalid protocol version : ' + version\n\t\t\t\t@arguments.version = version\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\t\"#{@protocol}/#{@version} #{@code} #{@message[@code]}\"\n\t# @property [Hash<Number, String>] status messages for status codes\n\tmessage:\n\t\t200 : 'OK'\n\t\t204 : 'No Content'\n\t\t310 : 'Communicate'\n\t\t311 : 'Not Enough'\n\t\t312 : 'Advice'\n\t\t400 : 'Bad Request'\n\t\t418 : \"I'm a tea pot\"\n\t\t500 : 'Internal Server Error'\n\n# SHIORI Message Headers Container\nclass ShioriJK.Headers\n\tconstructor : ->\n\t\t@header = {}\n\t# @property [Hash<String, String>] headers\n\theader: null\n\t# get header\n\t# @param name [String] header name\n\t# @return [String] header value\n\tget : (name) ->\n\t\tif @header[name]?\n\t\t\t@header[name]\n\t# set header\n\t# @param name [String] header name\n\t# @param value [String] header value\n\t# @return [String] header value\n\tset : (name, value) ->\n\t\t@header[name] = value\n\t# get header separated by \\x01 or some as an array\n\t# @param name [String] header name\n\t# @param separator [String] separator characters\n\t# @return [Array<String>] header values\n\tget_separated : (name, separator = '\\x01') ->\n\t\tif @header[name]?\n\t\t\t@header[name].split separator\n\t# set header separated by \\x01 or some as an array\n\t# @param name [String] header name\n\t# @param value [Array<String>] header values\n\t# @param separator [String] separator characters\n\t# @return [String] header value\n\tset_separated : (name, value, separator = '\\x01') ->\n\t\t@header[name] = value.join separator\n\t# get header separated by \\x02 and \\x01 or some as an array\n\t# @param name [String] header name\n\t# @param separator1 [String] first level separator characters\n\t# @param separator2 [String] second level separator characters\n\t# @return [Array<Array<String>>] header values\n\tget_separated2 : (name, separator1 = '\\x02', separator2 = '\\x01') ->\n\t\tif @header[name]?\n\t\t\t((element.split separator2) for element in @header[name].split separator1)\n\t# set header separated by \\x02 and \\x01 or some as an array\n\t# @param name [String] header name\n\t# @param value [Array<Array<String>>] header values\n\t# @param separator1 [String] first level separator characters\n\t# @param separator2 [String] second level separator characters\n\t# @return [String] header value\n\tset_separated2 : (name, value, separator1 = '\\x02', separator2 = '\\x01') ->\n\t\t@header[name] = (element.join separator2 for element in value).join separator1\n\t# check that headers are line feed free\n\t# @throw [String] if not\n\tvalidate : ->\n\t\tfor name, value of @header\n\t\t\tif value.match /\\n/\n\t\t\t\tthrow 'Invalid header value - line feed found : [' + name + '] : ' + value\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\tstr = ''\n\t\t@validate()\n\t\tfor name, value of @header\n\t\t\tstr += \"#{name}: #{value}\\r\\n\"\n\t\tstr\n\n# SHIORI Request Message Headers Container\nclass ShioriJK.Headers.Request extends ShioriJK.Headers\n\n# SHIORI Response Message Headers Container\nclass ShioriJK.Headers.Response extends ShioriJK.Headers\n\n","ShioriJK.Shiori = {}\nShioriJK.Shiori.Header = {}\nShioriJK.Shiori.Request = {}\nShioriJK.Shiori.Request.RequestLine = {}\nShioriJK.Shiori.Request.Header = {}\nShioriJK.Shiori.Response = {}\nShioriJK.Shiori.Response.StatusLine = {}\nShioriJK.Shiori.Response.Header = {}\n\n# parser base class\nclass ShioriJK.Shiori.Parser\n\t# @return [Boolean]\n\tis_parsing : ->\n\t\tnot @section.is 'idle'\n\t# @return [Boolean]\n\tis_parsing_end : ->\n\t\tnot @section.is 'end'\n\t# get parser result\n\t# @return result\n\tget_result : ->\n\t\t@result\n\t# build result container\n\t# @abstract used by subclasses\n\t# @return empty result container\n\tresult_builder : ->\n\t# set section state to first section\n\t# @throw [String] if before section != 'idle'\n\tbegin_parse : ->\n\t\tunless @section.is 'idle'\n\t\t\tthrow 'cannot begin parsing because previous transaction is still working'\n\t\t@result = @result_builder()\n\t\t@section.next()\n\t# set section state to begining section\n\t# @throw [String] if before section != 'end'\n\tend_parse : ->\n\t\tunless @section.is 'end'\n\t\t\t@abort_parse()\n\t\t\tthrow 'parsing was aborted'\n\t\t@section.next()\n\t# set section state to begining section FORCE!\n\t# @note recursively abort parsing\n\tabort_parse : ->\n\t\tif @parsers?\n\t\t\tfor name, parser of @parsers\n\t\t\t\tparser.abort_parse() if parser.abort_parse?\n\t\t@section.set 'idle'\n\t# parse a transaction\n\t# @param transaction [String] complete transaction\n\t# @return parse_chunk()'s one result\n\t# @throw [String] if transaction is not complete\n\tparse : (transaction) ->\n\t\t@begin_parse()\n\t\tresult = @parse_chunk transaction\n\t\tif @is_parsing()\n\t\t\tthrow 'transaction is not closed'\n\t\tif result.results.length != 1\n\t\t\tthrow 'multiple transaction'\n\t\tresult.results[0]\n\t# parse transaction chunk\n\t# @param chunk [String] transaction chunk\n\t# @return [Array] parse_lines()'s results\n\tparse_chunk : (chunk) ->\n\t\tlines = chunk.split /\\r\\n/\n\t\tif chunk.match /\\r\\n$/\n\t\t\tlines.pop()\n\t\t@parse_lines lines\n\t# parse chunk lines\n\t# @param lines [Array<String>] transaction chunk separated by \\r\\n\n\t# @return [Hash] {results: parse_line()'s result, state: parser state}\n\tparse_lines : (lines) ->\n\t\tresults = []\n\t\tfor line in lines\n\t\t\tresult = @parse_line line\n\t\t\tif result.state == 'end'\n\t\t\t\tresults.push result.result\n\t\tresults : results\n\t\tstate : result.state\n\t# parse line\n\t# @param line [String] transaction line separated by \\r\\n\n\t# @return [Hash] {results: result (if state is end), state: parser state}\n\tparse_line : (line) ->\n\t\tif @section.is 'idle'\n\t\t\t@begin_parse()\n\t\t@parse_main line\n\t\tif @section.is 'end'\n\t\t\t@end_parse()\n\t\t\tresult : @get_result()\n\t\t\tstate : 'end'\n\t\telse\n\t\t\tstate : 'continue'\n\t# parser main routine\n\t# @abstract implemented by subclasses\n\tparse_main : (line) ->\n\n# parser section state manager\nclass ShioriJK.Shiori.Section\n\tconstructor : (@sections) ->\n\t\t@index = 0\n\tis : (section) ->\n\t\t@sections[@index] == section\n\tnext : ->\n\t\tif @index == @sections.length - 1\n\t\t\t@index = 0\n\t\telse\n\t\t\t@index++\n\tprevious : ->\n\t\tif @index == 0\n\t\t\t@index = @sections.length - 1\n\t\telse\n\t\t\t@index--\n\tset : (section) ->\n\t\t@index = @sections.indexOf section\n\tget : ->\n\t\t@sections[@index]\n\nclass ShioriJK.Shiori.Header.Parser extends ShioriJK.Shiori.Parser\n\tparse_main : (line) ->\n\t\tresult = @parse_header line\n\t\tif result.state == 'end'\n\t\t\t@section.next()\n\tparse_header : (line) ->\n\t\tif line.length\n\t\t\tif result = line.match /^(.+?): (.*)$/\n\t\t\t\t@result.header[result[1]] = result[2]\n\t\t\telse\n\t\t\t\tthrow 'Invalid header line : ' + line\n\t\t\tstate : 'continue'\n\t\telse\n\t\t\tstate : 'end'\n\nclass ShioriJK.Shiori.Header.Section extends ShioriJK.Shiori.Section\n\tconstructor : (@sections = ['idle', 'header', 'end']) ->\n\t\t@index = 0\n\n# SHIORI Request parser\nclass ShioriJK.Shiori.Request.Parser extends ShioriJK.Shiori.Parser\n\tconstructor : () ->\n\t\t@parsers = {\n\t\t\trequest_line : new ShioriJK.Shiori.Request.RequestLine.Parser()\n\t\t\theaders : new ShioriJK.Shiori.Request.Header.Parser()\n\t\t}\n\t\t@section = new ShioriJK.Shiori.Request.Section()\n\tresult_builder : ->\n\t\tnew ShioriJK.Message.Request(no_prepare: true)\n\tparse_main : (line) ->\n\t\tparser = @parsers[@section.get()]\n\t\tparser_result = parser.parse_line line\n\t\tif parser_result.state == 'end'\n\t\t\t@result[@section.get()] = parser_result.result\n\t\t\t@section.next()\n\nclass ShioriJK.Shiori.Request.RequestLine.Parser\n\tconstructor : () ->\n\tresult_builder : ->\n\t\tnew ShioriJK.RequestLine()\n\tparse : (transaction) ->\n\t\t@parse_chunk transaction\n\tparse_chunk : (chunk) ->\n\t\t@parse_line chunk\n\tparse_line : (line) ->\n\t\tresult = line.match /^([A-Za-z0-9 ]+) SHIORI\\/([0-9.]+)/\n\t\tunless result\n\t\t\tthrow 'Invalid request line : ' + line\n\t\t@result = @result_builder()\n\t\t@result.method = result[1]\n\t\t@result.protocol = 'SHIORI'\n\t\t@result.version = result[2]\n\t\tresult : @result\n\t\tstate : 'end'\n\nclass ShioriJK.Shiori.Request.Header.Parser extends ShioriJK.Shiori.Header.Parser\n\tconstructor : () ->\n\t\t@section = new ShioriJK.Shiori.Request.Header.Section()\n\tresult_builder : ->\n\t\tnew ShioriJK.Headers.Request()\n\nclass ShioriJK.Shiori.Request.Section extends ShioriJK.Shiori.Section\n\tconstructor : (@sections = ['idle', 'request_line', 'headers', 'end']) ->\n\t\t@index = 0\n\nclass ShioriJK.Shiori.Request.Header.Section extends ShioriJK.Shiori.Header.Section\n\n# SHIORI Response parser\nclass ShioriJK.Shiori.Response.Parser extends ShioriJK.Shiori.Parser\n\tconstructor : () ->\n\t\t@parsers = {\n\t\t\tstatus_line : new ShioriJK.Shiori.Response.StatusLine.Parser()\n\t\t\theaders : new ShioriJK.Shiori.Response.Header.Parser()\n\t\t}\n\t\t@section = new ShioriJK.Shiori.Response.Section()\n\tresult_builder : ->\n\t\tnew ShioriJK.Message.Response(no_prepare: true)\n\tparse_main : (line) ->\n\t\tparser = @parsers[@section.get()]\n\t\tparser_result = parser.parse_line line\n\t\tif parser_result.state == 'end'\n\t\t\t@result[@section.get()] = parser_result.result\n\t\t\t@section.next()\n\nclass ShioriJK.Shiori.Response.StatusLine.Parser\n\tconstructor : () ->\n\tresult_builder : ->\n\t\tnew ShioriJK.StatusLine()\n\tparse : (transaction) ->\n\t\t@parse_chunk transaction\n\tparse_chunk : (chunk) ->\n\t\t@parse_line chunk\n\tparse_line : (line) ->\n\t\tresult = line.match /^SHIORI\\/([0-9.]+) (\\d+) (.+)$/\n\t\tunless result\n\t\t\tthrow 'Invalid status line : ' + line\n\t\t@result = @result_builder()\n\t\t@result.protocol = 'SHIORI'\n\t\t@result.version = result[1]\n\t\t@result.code = result[2] - 0\n\t\tresult : @result\n\t\tstate : 'end'\n\nclass ShioriJK.Shiori.Response.Header.Parser extends ShioriJK.Shiori.Header.Parser\n\tconstructor : () ->\n\t\t@section = new ShioriJK.Shiori.Response.Header.Section()\n\tresult_builder : ->\n\t\tnew ShioriJK.Headers.Response()\n\nclass ShioriJK.Shiori.Response.Section extends ShioriJK.Shiori.Section\n\tconstructor : (@sections = ['idle', 'status_line', 'headers', 'end']) ->\n\t\t@index = 0\n\nclass ShioriJK.Shiori.Response.Header.Section extends ShioriJK.Shiori.Header.Section\n"]}