{"version":3,"sources":["shiorijk.coffee","shiorijk-container.coffee","shiorijk-shiori-parser.coffee"],"names":[],"mappings":"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","file":"shiorijk.js","sourceRoot":"/source/","sourcesContent":["### (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 ###\n\nShioriJK = {}\n\nif module? and module.exports?\n  module.exports = ShioriJK\n","Function::property = (properties) ->\n  for property, descriptions of properties\n    Object.defineProperty @prototype, property, descriptions\n\nShioriJK.Message = {}\n\n# SHIORI Request Message Container\nclass ShioriJK.Message.Request\n  # initialize inner containers\n  # @param request_line [Hash|ShioriJK.Requestline] request line\n  # @param headers [Hash|ShioriJK.Headers.Request] request headers\n  # @param no_prepare [Boolean] do not prepare default RequestLine and Headers by the constructor\n  constructor : ({request_line, headers, no_prepare} = {}) ->\n    @request_line =\n      if request_line?\n        if request_line instanceof ShioriJK.RequestLine\n          request_line\n        else\n          new ShioriJK.RequestLine(request_line)\n      else if not no_prepare\n        new ShioriJK.RequestLine()\n    @headers =\n      if headers?\n        if headers instanceof ShioriJK.Headers.Request\n          headers\n        else\n          new ShioriJK.Headers.Request(headers)\n      else\n        new ShioriJK.Headers.Request()\n  # @property [ShioriJK.RequestLine] RequestLine Container\n  request_line: null\n  # @property [ShioriJK.Headers.Request] Headers Container\n  headers: null\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    @request_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Response Message Container\nclass ShioriJK.Message.Response\n  # initialize inner containers\n  # @param status_line [Hash|ShioriJK.Statusline] status line\n  # @param headers [Hash|ShioriJK.Headers.Response] response headers\n  # @param no_prepare [Boolean] do not prepare default StatusLine and Headers by the constructor\n  constructor : ({status_line, headers, no_prepare} = {}) ->\n    @status_line =\n      if status_line?\n        if status_line instanceof ShioriJK.StatusLine\n          status_line\n        else\n          new ShioriJK.StatusLine(status_line)\n      else if not no_prepare\n        new ShioriJK.StatusLine()\n    @headers =\n      if headers?\n        if headers instanceof ShioriJK.Headers.Response\n          headers\n        else\n          new ShioriJK.Headers.Response(headers)\n      else\n        new ShioriJK.Headers.Response()\n  # @property [ShioriJK.RequestLine] StatusLine Container\n  status_line: null\n  # @property [ShioriJK.Headers.Request] Headers Container\n  headers: null\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    @status_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Request Message's RequestLine Container\nclass ShioriJK.RequestLine\n  # initialize request line\n  # @param method [string] method\n  # @param protocol [string] protocol (default = 'SHIORI')\n  # @param version [string] version\n  constructor : ({method, protocol, version} = {}) ->\n    @arguments = {}\n    if method? then @method = method\n    @protocol = protocol || 'SHIORI' # for codo\n    if version? then @version = version\n  # @property [String] request method\n  method: null\n  # @property [String] protocol\n  protocol: null\n  # @property [String] version\n  version: null\n  @property\n    method :\n      get : -> @arguments.method\n      set : (method) ->\n        if method? and @version?\n          @validate_method_version method, @version\n        else if method?\n          switch method\n            when 'GET', 'NOTIFY', 'GET Version', 'GET Sentence', 'GET Word', 'GET Status', 'TEACH', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'TRANSLATE Sentence'\n            else\n              throw 'Invalid protocol method : ' + method\n        @arguments.method = method\n    protocol :\n      get : -> @arguments.protocol\n      set : (protocol) ->\n        if protocol? and protocol != 'SHIORI'\n          throw 'Invalid protocol : ' + protocol\n        @arguments.protocol = protocol\n    version :\n      get : -> @arguments.version\n      set : (version) ->\n        if @method? and version?\n          @validate_method_version @method, version\n        else if version?\n          switch version\n            when '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n            else\n              throw 'Invalid protocol version : ' + version\n        @arguments.version = version\n  # validate\n  # @param method [String] method name == 'SHIORI'\n  # @param version [Number] version\n  # @throw [String] if invalid\n  validate_method_version : (method, version) ->\n    is_valid = false\n    switch version\n      when '2.0'\n        switch method\n          when 'GET Version', 'NOTIFY OwnerGhostName', 'GET Sentence', 'GET Word', 'GET Status'\n            is_valid = true\n      when '2.2'\n        switch method\n          when 'GET Sentence'\n            is_valid = true\n      when '2.3'\n        switch method\n          when 'NOTIFY OtherGhostName', 'GET Sentence'\n            is_valid = true\n      when '2.4'\n        switch method\n          when 'TEACH'\n            is_valid = true\n      when '2.5'\n        switch method\n          when 'GET String'\n            is_valid = true\n      when '2.6' # spec is unknown\n        switch method\n          when 'GET Sentence', 'GET Status', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'GET Version', 'TRANSLATE Sentence'\n            is_valid = true\n      when '3.0'\n        switch method\n          when 'GET', 'NOTIFY'\n            is_valid = true\n    unless is_valid\n      throw 'Invalid protocol method and version : ' + method + ' SHIORI/' + version\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    \"#{@method} #{@protocol}/#{@version}\"\n\n# SHIORI Response Message's StatusLine Container\nclass ShioriJK.StatusLine\n  # initialize status line\n  # @param code [number] status code\n  # @param protocol [string] protocol (default = 'SHIORI')\n  # @param version [string] version\n  constructor : ({code, protocol, version} = {}) ->\n    @arguments = {}\n    if code? then @code = code\n    @protocol = protocol || 'SHIORI' # for codo\n    if version? then @version = version\n  # @property [String] status code\n  code: null\n  # @property [String] protocol\n  protocol: null\n  # @property [String] version\n  version: null\n  @property\n    code :\n      get : -> @arguments.code\n      set : (code) ->\n        if code? and not @message[code]?\n          throw 'Invalid response code : ' + code\n        @arguments.code = code\n    protocol :\n      get : -> @arguments.protocol\n      set : (protocol) ->\n        if protocol? and protocol != 'SHIORI'\n          throw 'Invalid protocol : ' + protocol\n        @arguments.protocol = protocol\n    version :\n      get : -> @arguments.version\n      set : (version) ->\n        if version?\n          switch version\n            when '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n            else\n              throw 'Invalid protocol version : ' + version\n        @arguments.version = version\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    \"#{@protocol}/#{@version} #{@code} #{@message[@code]}\"\n  # @property [Hash<Number, String>] status messages for status codes\n  message:\n    200 : 'OK'\n    204 : 'No Content'\n    310 : 'Communicate'\n    311 : 'Not Enough'\n    312 : 'Advice'\n    400 : 'Bad Request'\n    418 : \"I'm a tea pot\"\n    500 : 'Internal Server Error'\n\n# SHIORI Message Headers Container\nclass ShioriJK.Headers\n  # initialize headers\n  # @param header [Hash<String, String>] headers\n  constructor : (@header = {}) ->\n  # @property [Hash<String, String>] headers\n  header: null\n  # get header\n  # @param name [String] header name\n  # @return [String] header value\n  get : (name) ->\n    if @header[name]?\n      @header[name]\n  # set header\n  # @param name [String] header name\n  # @param value [String] header value\n  # @return [String] header value\n  set : (name, value) ->\n    @header[name] = value\n  # get header separated by \\x01 or some as an array\n  # @param name [String] header name\n  # @param separator [String] separator characters\n  # @return [Array<String>] header values\n  get_separated : (name, separator = '\\x01') ->\n    if @header[name]?\n      @header[name].split separator\n  # set header separated by \\x01 or some as an array\n  # @param name [String] header name\n  # @param value [Array<String>] header values\n  # @param separator [String] separator characters\n  # @return [String] header value\n  set_separated : (name, value, separator = '\\x01') ->\n    @header[name] = value.join separator\n  # get header separated by \\x02 and \\x01 or some as an array\n  # @param name [String] header name\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [Array<Array<String>>] header values\n  get_separated2 : (name, separator1 = '\\x02', separator2 = '\\x01') ->\n    if @header[name]?\n      ((element.split separator2) for element in @header[name].split separator1)\n  # set header separated by \\x02 and \\x01 or some as an array\n  # @param name [String] header name\n  # @param value [Array<Array<String>>] header values\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [String] header value\n  set_separated2 : (name, value, separator1 = '\\x02', separator2 = '\\x01') ->\n    @header[name] = (element.join separator2 for element in value).join separator1\n  # get Reference* headers\n  # @return [Array<String | undefined>] Reference* header values\n  references : ->\n    reference_max_index = -1\n    for name of @header\n      if (result = /^Reference(\\d+)$/.exec(name)) and reference_max_index < result[1] - 0\n        reference_max_index = result[1] - 0\n    (@header[\"Reference#{index}\"] for index in [0 ... reference_max_index + 1])\n  # check that headers are line feed free\n  # @throw [String] if not\n  validate : ->\n    for name, value of @header\n      if \"#{value}\".match /\\n/\n        throw 'Invalid header value - line feed found : [' + name + '] : ' + value\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    str = ''\n    @validate()\n    for name, value of @header\n      str += \"#{name}: #{value}\\r\\n\"\n    str\n\n# SHIORI Request Message Headers Container\nclass ShioriJK.Headers.Request extends ShioriJK.Headers\n\n# SHIORI Response Message Headers Container\nclass ShioriJK.Headers.Response extends ShioriJK.Headers\n\n","ShioriJK.Shiori = {}\nShioriJK.Shiori.Header = {}\nShioriJK.Shiori.Request = {}\nShioriJK.Shiori.Request.RequestLine = {}\nShioriJK.Shiori.Request.Header = {}\nShioriJK.Shiori.Response = {}\nShioriJK.Shiori.Response.StatusLine = {}\nShioriJK.Shiori.Response.Header = {}\n\n# parser base class\nclass ShioriJK.Shiori.Parser\n  # @return [Boolean]\n  is_parsing : ->\n    not @section.is 'idle'\n  # @return [Boolean]\n  is_parsing_end : ->\n    not @section.is 'end'\n  # get parser result\n  # @return result\n  get_result : ->\n    @result\n  # build result container\n  # @abstract used by subclasses\n  # @return empty result container\n  result_builder : ->\n  # set section state to first section\n  # @throw [String] if before section != 'idle'\n  begin_parse : ->\n    unless @section.is 'idle'\n      throw 'cannot begin parsing because previous transaction is still working'\n    @result = @result_builder()\n    @section.next()\n  # set section state to begining section\n  # @throw [String] if before section != 'end'\n  end_parse : ->\n    unless @section.is 'end'\n      @abort_parse()\n      throw 'parsing was aborted'\n    @section.next()\n  # set section state to begining section FORCE!\n  # @note recursively abort parsing\n  abort_parse : ->\n    if @parsers?\n      for name, parser of @parsers\n        parser.abort_parse() if parser.abort_parse?\n    @section.set 'idle'\n  # parse a transaction\n  # @param transaction [String] complete transaction\n  # @return parse_chunk()'s one result\n  # @throw [String] if transaction is not complete\n  parse : (transaction) ->\n    @begin_parse()\n    result = @parse_chunk transaction\n    if @is_parsing()\n      throw 'transaction is not closed'\n    if result.results.length != 1\n      throw 'multiple transaction'\n    result.results[0]\n  # parse transaction chunk\n  # @param chunk [String] transaction chunk\n  # @return [Array] parse_lines()'s results\n  parse_chunk : (chunk) ->\n    lines = chunk.split /\\r\\n/\n    if chunk.match /\\r\\n$/\n      lines.pop()\n    @parse_lines lines\n  # parse chunk lines\n  # @param lines [Array<String>] transaction chunk separated by \\r\\n\n  # @return [Hash] {results: parse_line()'s result, state: parser state}\n  parse_lines : (lines) ->\n    results = []\n    for line in lines\n      result = @parse_line line\n      if result.state == 'end'\n        results.push result.result\n    results : results\n    state : result.state\n  # parse line\n  # @param line [String] transaction line separated by \\r\\n\n  # @return [Hash] {results: result (if state is end), state: parser state}\n  parse_line : (line) ->\n    if @section.is 'idle'\n      @begin_parse()\n    @parse_main line\n    if @section.is 'end'\n      @end_parse()\n      result : @get_result()\n      state : 'end'\n    else\n      state : 'continue'\n  # parser main routine\n  # @abstract implemented by subclasses\n  parse_main : (line) ->\n\n# parser section state manager\nclass ShioriJK.Shiori.Section\n  constructor : (@sections) ->\n    @index = 0\n  is : (section) ->\n    @sections[@index] == section\n  next : ->\n    if @index == @sections.length - 1\n      @index = 0\n    else\n      @index++\n  previous : ->\n    if @index == 0\n      @index = @sections.length - 1\n    else\n      @index--\n  set : (section) ->\n    @index = @sections.indexOf section\n  get : ->\n    @sections[@index]\n\nclass ShioriJK.Shiori.Header.Parser extends ShioriJK.Shiori.Parser\n  parse_main : (line) ->\n    result = @parse_header line\n    if result.state == 'end'\n      @section.next()\n  parse_header : (line) ->\n    if line.length\n      if result = line.match /^(.+?): (.*)$/\n        @result.header[result[1]] = result[2]\n      else\n        throw 'Invalid header line : ' + line\n      state : 'continue'\n    else\n      state : 'end'\n\nclass ShioriJK.Shiori.Header.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'header', 'end']) ->\n    @index = 0\n\n# SHIORI Request parser\nclass ShioriJK.Shiori.Request.Parser extends ShioriJK.Shiori.Parser\n  constructor : () ->\n    @parsers = {\n      request_line : new ShioriJK.Shiori.Request.RequestLine.Parser()\n      headers : new ShioriJK.Shiori.Request.Header.Parser()\n    }\n    @section = new ShioriJK.Shiori.Request.Section()\n  result_builder : ->\n    new ShioriJK.Message.Request(no_prepare: true)\n  parse_main : (line) ->\n    parser = @parsers[@section.get()]\n    parser_result = parser.parse_line line\n    if parser_result.state == 'end'\n      @result[@section.get()] = parser_result.result\n      @section.next()\n\nclass ShioriJK.Shiori.Request.RequestLine.Parser\n  constructor : () ->\n  result_builder : ->\n    new ShioriJK.RequestLine()\n  parse : (transaction) ->\n    @parse_chunk transaction\n  parse_chunk : (chunk) ->\n    @parse_line chunk\n  parse_line : (line) ->\n    result = line.match /^([A-Za-z0-9 ]+) SHIORI\\/([0-9.]+)/\n    unless result\n      throw 'Invalid request line : ' + line\n    @result = @result_builder()\n    @result.method = result[1]\n    @result.protocol = 'SHIORI'\n    @result.version = result[2]\n    result : @result\n    state : 'end'\n\nclass ShioriJK.Shiori.Request.Header.Parser extends ShioriJK.Shiori.Header.Parser\n  constructor : () ->\n    @section = new ShioriJK.Shiori.Request.Header.Section()\n  result_builder : ->\n    new ShioriJK.Headers.Request()\n\nclass ShioriJK.Shiori.Request.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'request_line', 'headers', 'end']) ->\n    @index = 0\n\nclass ShioriJK.Shiori.Request.Header.Section extends ShioriJK.Shiori.Header.Section\n\n# SHIORI Response parser\nclass ShioriJK.Shiori.Response.Parser extends ShioriJK.Shiori.Parser\n  constructor : () ->\n    @parsers = {\n      status_line : new ShioriJK.Shiori.Response.StatusLine.Parser()\n      headers : new ShioriJK.Shiori.Response.Header.Parser()\n    }\n    @section = new ShioriJK.Shiori.Response.Section()\n  result_builder : ->\n    new ShioriJK.Message.Response(no_prepare: true)\n  parse_main : (line) ->\n    parser = @parsers[@section.get()]\n    parser_result = parser.parse_line line\n    if parser_result.state == 'end'\n      @result[@section.get()] = parser_result.result\n      @section.next()\n\nclass ShioriJK.Shiori.Response.StatusLine.Parser\n  constructor : () ->\n  result_builder : ->\n    new ShioriJK.StatusLine()\n  parse : (transaction) ->\n    @parse_chunk transaction\n  parse_chunk : (chunk) ->\n    @parse_line chunk\n  parse_line : (line) ->\n    result = line.match /^SHIORI\\/([0-9.]+) (\\d+) (.+)$/\n    unless result\n      throw 'Invalid status line : ' + line\n    @result = @result_builder()\n    @result.protocol = 'SHIORI'\n    @result.version = result[1]\n    @result.code = result[2] - 0\n    result : @result\n    state : 'end'\n\nclass ShioriJK.Shiori.Response.Header.Parser extends ShioriJK.Shiori.Header.Parser\n  constructor : () ->\n    @section = new ShioriJK.Shiori.Response.Header.Section()\n  result_builder : ->\n    new ShioriJK.Headers.Response()\n\nclass ShioriJK.Shiori.Response.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'status_line', 'headers', 'end']) ->\n    @index = 0\n\nclass ShioriJK.Shiori.Response.Header.Section extends ShioriJK.Shiori.Header.Section\n"]}