{"version":3,"sources":["shiorijk.coffee","shiorijk-container.coffee","shiorijk-shiori-parser.coffee"],"names":["ShioriJK","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","module","exports","Function","property","properties","descriptions","results1","Object","defineProperty","Message","Request","arg","headers","no_prepare","ref","request_line","RequestLine","Headers","toString","Response","status_line","StatusLine","method","protocol","version","get","set","validate_method_version","is_valid","code","message",200,204,310,311,312,400,418,500,"header","name","value","get_separated","separator","split","set_separated","join","get_separated2","separator1","separator2","element","i","len","length","set_separated2","references","index","reference_max_index","result","exec","validate","match","str","Reference","ReferenceSeparated","ReferenceSeparated2","superClass","Charset","Sender","SecurityLevel","ID","Event","Type","Status","Ghost","Sentence","To","Age","Surface","Word","age","Number","BalloonOffset","String","StringSeparated","StringSeparated2","Value","ValueSeparated","ValueSeparated2","values","results2","j","len1","Shiori","Header","Parser","is_parsing","section","is","is_parsing_end","get_result","result_builder","begin_parse","next","end_parse","abort_parse","parser","parsers","parse","transaction","parse_chunk","results","chunk","lines","pop","parse_lines","line","parse_line","state","push","parse_main","Section","sections","previous","indexOf","parse_header","parser_result"],"mappings":"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","file":"shiorijk.min.js","sourcesContent":["### (C) 2014-2016 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2016 ###\n\nShioriJK = {}\n\nif module? and module.exports?\n  module.exports = ShioriJK\n","Function::property = (properties) ->\n  for property, descriptions of properties\n    Object.defineProperty @prototype, property, descriptions\n\nShioriJK.Message = {}\n\n# SHIORI Request Message Container\nclass ShioriJK.Message.Request\n  # initialize inner containers\n  # @param request_line [Hash|ShioriJK.Requestline] request line\n  # @param headers [Hash|ShioriJK.Headers.Request] request headers\n  # @param no_prepare [Boolean] do not prepare default RequestLine and Headers by the constructor\n  constructor : ({request_line, headers, no_prepare} = {}) ->\n    @request_line =\n      if request_line?\n        if request_line instanceof ShioriJK.RequestLine\n          request_line\n        else\n          new ShioriJK.RequestLine(request_line)\n      else if not no_prepare\n        new ShioriJK.RequestLine()\n    @headers =\n      if headers?\n        if headers instanceof ShioriJK.Headers.Request\n          headers\n        else\n          new ShioriJK.Headers.Request(headers)\n      else\n        new ShioriJK.Headers.Request()\n  # @property [ShioriJK.RequestLine] RequestLine Container\n  request_line: null\n  # @property [ShioriJK.Headers.Request] Headers Container\n  headers: null\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    @request_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Response Message Container\nclass ShioriJK.Message.Response\n  # initialize inner containers\n  # @param status_line [Hash|ShioriJK.Statusline] status line\n  # @param headers [Hash|ShioriJK.Headers.Response] response headers\n  # @param no_prepare [Boolean] do not prepare default StatusLine and Headers by the constructor\n  constructor : ({status_line, headers, no_prepare} = {}) ->\n    @status_line =\n      if status_line?\n        if status_line instanceof ShioriJK.StatusLine\n          status_line\n        else\n          new ShioriJK.StatusLine(status_line)\n      else if not no_prepare\n        new ShioriJK.StatusLine()\n    @headers =\n      if headers?\n        if headers instanceof ShioriJK.Headers.Response\n          headers\n        else\n          new ShioriJK.Headers.Response(headers)\n      else\n        new ShioriJK.Headers.Response()\n  # @property [ShioriJK.RequestLine] StatusLine Container\n  status_line: null\n  # @property [ShioriJK.Headers.Request] Headers Container\n  headers: null\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    @status_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Request Message's RequestLine Container\nclass ShioriJK.RequestLine\n  # initialize request line\n  # @param method [string] method\n  # @param protocol [string] protocol (default = 'SHIORI')\n  # @param version [string] version\n  constructor : ({method, protocol, version} = {}) ->\n    @arguments = {}\n    if method? then @method = method\n    @protocol = protocol || 'SHIORI' # for codo\n    if version? then @version = version\n  # @property [String] request method\n  method: null\n  # @property [String] protocol\n  protocol: null\n  # @property [String] version\n  version: null\n  @property\n    method :\n      get : -> @arguments.method\n      set : (method) ->\n        if method? and @version?\n          @validate_method_version method, @version\n        else if method?\n          switch method\n            when 'GET', 'NOTIFY', 'GET Version', 'GET Sentence', 'GET Word', 'GET Status', 'TEACH', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'TRANSLATE Sentence'\n            else\n              throw 'Invalid protocol method : ' + method\n        @arguments.method = method\n    protocol :\n      get : -> @arguments.protocol\n      set : (protocol) ->\n        if protocol? and protocol != 'SHIORI'\n          throw 'Invalid protocol : ' + protocol\n        @arguments.protocol = protocol\n    version :\n      get : -> @arguments.version\n      set : (version) ->\n        if @method? and version?\n          @validate_method_version @method, version\n        else if version?\n          switch version\n            when '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n            else\n              throw 'Invalid protocol version : ' + version\n        @arguments.version = version\n  # validate\n  # @param method [String] method name == 'SHIORI'\n  # @param version [Number] version\n  # @throw [String] if invalid\n  validate_method_version : (method, version) ->\n    is_valid = false\n    switch version\n      when '2.0'\n        switch method\n          when 'GET Version', 'NOTIFY OwnerGhostName', 'GET Sentence', 'GET Word', 'GET Status'\n            is_valid = true\n      when '2.2'\n        switch method\n          when 'GET Sentence'\n            is_valid = true\n      when '2.3'\n        switch method\n          when 'NOTIFY OtherGhostName', 'GET Sentence'\n            is_valid = true\n      when '2.4'\n        switch method\n          when 'TEACH'\n            is_valid = true\n      when '2.5'\n        switch method\n          when 'GET String'\n            is_valid = true\n      when '2.6' # spec is unknown\n        switch method\n          when 'GET Sentence', 'GET Status', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'GET Version', 'TRANSLATE Sentence'\n            is_valid = true\n      when '3.0'\n        switch method\n          when 'GET', 'NOTIFY'\n            is_valid = true\n    unless is_valid\n      throw 'Invalid protocol method and version : ' + method + ' SHIORI/' + version\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    \"#{@method} #{@protocol}/#{@version}\"\n\n# SHIORI Response Message's StatusLine Container\nclass ShioriJK.StatusLine\n  # initialize status line\n  # @param code [number] status code\n  # @param protocol [string] protocol (default = 'SHIORI')\n  # @param version [string] version\n  constructor : ({code, protocol, version} = {}) ->\n    @arguments = {}\n    if code? then @code = code\n    @protocol = protocol || 'SHIORI' # for codo\n    if version? then @version = version\n  # @property [String] status code\n  code: null\n  # @property [String] protocol\n  protocol: null\n  # @property [String] version\n  version: null\n  @property\n    code :\n      get : -> @arguments.code\n      set : (code) ->\n        if code? and not @message[code]?\n          throw 'Invalid response code : ' + code\n        @arguments.code = code\n    protocol :\n      get : -> @arguments.protocol\n      set : (protocol) ->\n        if protocol? and protocol != 'SHIORI'\n          throw 'Invalid protocol : ' + protocol\n        @arguments.protocol = protocol\n    version :\n      get : -> @arguments.version\n      set : (version) ->\n        if version?\n          switch version\n            when '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n            else\n              throw 'Invalid protocol version : ' + version\n        @arguments.version = version\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    \"#{@protocol}/#{@version} #{@code} #{@message[@code]}\"\n  # @property [Hash<Number, String>] status messages for status codes\n  message:\n    200 : 'OK'\n    204 : 'No Content'\n    310 : 'Communicate'\n    311 : 'Not Enough'\n    312 : 'Advice'\n    400 : 'Bad Request'\n    418 : \"I'm a tea pot\"\n    500 : 'Internal Server Error'\n\n# SHIORI Message Headers Container\nclass ShioriJK.Headers\n  # initialize headers\n  # @param header [Hash<String, String>] headers\n  constructor : (@header = {}) ->\n  # @property [Hash<String, String>] headers\n  header: null\n  # get header\n  # @param name [String] header name\n  # @return [String] header value\n  get : (name) ->\n    if @header[name]?\n      @header[name]\n  # set header\n  # @param name [String] header name\n  # @param value [String] header value\n  # @return [String] header value\n  set : (name, value) ->\n    @header[name] = value\n  # get header separated by \\x01 or some as an array\n  # @param name [String] header name\n  # @param separator [String] separator characters\n  # @return [Array<String>] header values\n  get_separated : (name, separator = '\\x01') ->\n    if @header[name]?\n      @header[name].split separator\n  # set header separated by \\x01 or some as an array\n  # @param name [String] header name\n  # @param value [Array<String>] header values\n  # @param separator [String] separator characters\n  # @return [String] header value\n  set_separated : (name, value, separator = '\\x01') ->\n    @header[name] = value.join separator\n  # get header separated by \\x02 and \\x01 or some as an array\n  # @param name [String] header name\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [Array<Array<String>>] header values\n  get_separated2 : (name, separator1 = '\\x02', separator2 = '\\x01') ->\n    if @header[name]?\n      ((element.split separator2) for element in @header[name].split separator1)\n  # set header separated by \\x02 and \\x01 or some as an array\n  # @param name [String] header name\n  # @param value [Array<Array<String>>] header values\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [String] header value\n  set_separated2 : (name, value, separator1 = '\\x02', separator2 = '\\x01') ->\n    @header[name] = (element.join separator2 for element in value).join separator1\n  # get Reference* headers\n  # @return [Array<String | undefined>] Reference* header values\n  references : ->\n    reference_max_index = -1\n    for name of @header\n      if (result = /^Reference(\\d+)$/.exec(name)) and reference_max_index < result[1] - 0\n        reference_max_index = result[1] - 0\n    (@header[\"Reference#{index}\"] for index in [0 ... reference_max_index + 1])\n  # check that headers are line feed free\n  # @throw [String] if not\n  validate : ->\n    for name, value of @header\n      if \"#{value}\".match /\\n/\n        throw 'Invalid header value - line feed found : [' + name + '] : ' + value\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    str = ''\n    @validate()\n    for name, value of @header\n      str += \"#{name}: #{value}\\r\\n\"\n    str\n  # Reference* header (SHIORI/2.2-2.6,3.x)\n  # @param index [Number] reference index\n  # @return [String] header value\n  Reference : (index) -> @get \"Reference#{index}\"\n  # Value header (GET SHIORI/3.0)\n  # Reference* header (SHIORI/2.2-2.6,3.x)\n  # @param index [Number] reference index\n  # @param separator [String] separator characters\n  # @return [Array<String>] header values\n  ReferenceSeparated : (index, separator = '\\x01') -> (@get_separated \"Reference#{index}\", separator) || []\n  # Reference* header (SHIORI/2.2-2.6,3.x)\n  # @param index [Number] reference index\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [Array<Array<String>>] header values\n  ReferenceSeparated2 : (index, separator1 = '\\x02', separator2 = '\\x01') -> (@get_separated2 \"Reference#{index}\", separator1, separator2) || []\n\n# SHIORI Request Message Headers Container\nclass ShioriJK.Headers.Request extends ShioriJK.Headers\n  # @property [String] Charset header\n  Charset: null\n  # @property [String] Sender header\n  Sender: null\n  # @property [String] SecurityLevel header (SHIORI/2.2,2.6,3.x)\n  SecurityLevel: null\n  # @property [String] ID header (SHIORI/2.5,3.x)\n  ID: null\n  # @property [String] Event header (SHIORI/2.2)\n  Event: null\n  # @property [String] Type header (GET Word SHIORI/2.0)\n  Type: null\n  # @property [Array<String>] Status header (SHIORI/3.1)\n  Status: null\n  # @property [String] Ghost header (NOTIFY OwnerGhostName SHIORI/2.0,2.3)\n  Ghost: null\n  # @property [String] Sentence header (SHIORI/2.0,2.3b)\n  Sentence: null\n  # @property [String] To header (SHIORI/2.3b)\n  To: null\n  # @property [Number] Age header (SHIORI/2.3b)\n  Age: null\n  # @property [Array<Number>] Surface header (SHIORI/2.3b)\n  Surface: null\n  # @property [String] Word header (TEACH SHIORI/2.4)\n  Word: null\n  @property\n    # @property [String] Charset header\n    Charset :\n      get : -> @get \"Charset\"\n    # @property [String] Sender header\n    Sender :\n      get : -> @get \"Sender\"\n    # @property [String] SecurityLevel header (SHIORI/2.2,2.6,3.x)\n    SecurityLevel :\n      get : -> @get \"SecurityLevel\"\n    # @property [String] ID header (SHIORI/2.5,3.x)\n    ID :\n      get : -> @get \"ID\"\n    # @property [String] Event header (SHIORI/2.2)\n    Event :\n      get : -> @get \"Event\"\n    # @property [String] Type header (GET Word SHIORI/2.0)\n    Type :\n      get : -> @get \"Type\"\n    # @property [Array<String>] Status header (SHIORI/3.1)\n    Status :\n      get : -> (@get_separated \"Status\", \",\") || []\n    # @property [String] Ghost header (NOTIFY OwnerGhostName SHIORI/2.0,2.3)\n    Ghost :\n      get : -> @get \"Ghost\"\n    # @property [String] Sentence header (SHIORI/2.0,2.3b)\n    Sentence :\n      get : -> @get \"Sentence\"\n    # @property [String] To header (SHIORI/2.3b)\n    To :\n      get : -> @get \"To\"\n    # @property [Number] Age header (SHIORI/2.3b)\n    Age :\n      get : ->\n        age = @get \"Age\"\n        if age then Number(age)\n    # @property [Array<Number>] Surface header (SHIORI/2.3b)\n    Surface :\n      get : -> Number(value) for value in (@get_separated \"Surface\", \",\") || []\n    # @property [String] Word header (TEACH SHIORI/2.4)\n    Word :\n      get : -> @get \"Word\"\n\n# SHIORI Response Message Headers Container\nclass ShioriJK.Headers.Response extends ShioriJK.Headers\n  # @property [Array<Array<Number>>] BalloonOffset header (SHIORI/2.0)\n  BalloonOffset: null\n  # @property [Array<Number>] Surface header (SHIORI/2.3b)\n  Surface: null\n  # @property [String] Sentence header (SHIORI/2.0,2.2,2.3b,2.4)\n  Sentence: null\n  # @property [String] Word header (GET Word SHIORI/2.0)\n  Word: null\n  # @property [Array<Number>] Status header (GET Status SHIORI/2.0)\n  Status: null\n  # @property [String] String header (GET String SHIORI/2.5)\n  String: null\n  # String header (GET String SHIORI/2.5)\n  # @param separator [String] separator characters\n  # @return [Array<String>] header values\n  StringSeparated : (separator = '\\x01') -> (@get_separated \"String\", separator) || []\n  # String header (GET String SHIORI/2.5)\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [Array<Array<String>>] header values\n  StringSeparated2 : (separator1 = '\\x02', separator2 = '\\x01') -> (@get_separated2 \"String\", separator1, separator2) || []\n  # @property [String] Value header (GET SHIORI/3.0)\n  Value: null\n  # Value header (GET SHIORI/3.0)\n  # @param separator [String] separator characters\n  # @return [Array<String>] header values\n  ValueSeparated : (separator = '\\x01') -> (@get_separated \"Value\", separator) || []\n  # Value header (GET SHIORI/3.0)\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [Array<Array<String>>] header values\n  ValueSeparated2 : (separator1 = '\\x02', separator2 = '\\x01') -> (@get_separated2 \"Value\", separator1, separator2) || []\n  @property\n    BalloonOffset :\n      get : ->\n        for values in (@get_separated2 \"BalloonOffset\", \",\") || []\n          for value in values\n            Number(value)\n    Surface :\n      get : -> Number(value) for value in (@get_separated \"Surface\", \",\") || []\n    Sentence :\n      get : -> @get \"Sentence\"\n    Word :\n      get : -> @get \"Word\"\n    Status :\n      get : -> Number(value) for value in (@get_separated \"Status\", \",\") || []\n    String :\n      get : -> @get \"String\"\n    Value :\n      get : -> @get \"Value\"\n","ShioriJK.Shiori = {}\nShioriJK.Shiori.Header = {}\nShioriJK.Shiori.Request = {}\nShioriJK.Shiori.Request.RequestLine = {}\nShioriJK.Shiori.Request.Header = {}\nShioriJK.Shiori.Response = {}\nShioriJK.Shiori.Response.StatusLine = {}\nShioriJK.Shiori.Response.Header = {}\n\n# parser base class\nclass ShioriJK.Shiori.Parser\n  # @return [Boolean]\n  is_parsing : ->\n    not @section.is 'idle'\n  # @return [Boolean]\n  is_parsing_end : ->\n    not @section.is 'end'\n  # get parser result\n  # @return result\n  get_result : ->\n    @result\n  # build result container\n  # @abstract used by subclasses\n  # @return empty result container\n  result_builder : ->\n  # set section state to first section\n  # @throw [String] if before section != 'idle'\n  begin_parse : ->\n    unless @section.is 'idle'\n      throw 'cannot begin parsing because previous transaction is still working'\n    @result = @result_builder()\n    @section.next()\n  # set section state to begining section\n  # @throw [String] if before section != 'end'\n  end_parse : ->\n    unless @section.is 'end'\n      @abort_parse()\n      throw 'parsing was aborted'\n    @section.next()\n  # set section state to begining section FORCE!\n  # @note recursively abort parsing\n  abort_parse : ->\n    if @parsers?\n      for name, parser of @parsers\n        parser.abort_parse() if parser.abort_parse?\n    @section.set 'idle'\n  # parse a transaction\n  # @param transaction [String] complete transaction\n  # @return parse_chunk()'s one result\n  # @throw [String] if transaction is not complete\n  parse : (transaction) ->\n    @begin_parse()\n    result = @parse_chunk transaction\n    if @is_parsing()\n      throw 'transaction is not closed'\n    if result.results.length != 1\n      throw 'multiple transaction'\n    result.results[0]\n  # parse transaction chunk\n  # @param chunk [String] transaction chunk\n  # @return [Array] parse_lines()'s results\n  parse_chunk : (chunk) ->\n    lines = chunk.split /\\r\\n/\n    if chunk.match /\\r\\n$/\n      lines.pop()\n    @parse_lines lines\n  # parse chunk lines\n  # @param lines [Array<String>] transaction chunk separated by \\r\\n\n  # @return [Hash] {results: parse_line()'s result, state: parser state}\n  parse_lines : (lines) ->\n    results = []\n    for line in lines\n      result = @parse_line line\n      if result.state == 'end'\n        results.push result.result\n    results : results\n    state : result.state\n  # parse line\n  # @param line [String] transaction line separated by \\r\\n\n  # @return [Hash] {results: result (if state is end), state: parser state}\n  parse_line : (line) ->\n    if @section.is 'idle'\n      @begin_parse()\n    @parse_main line\n    if @section.is 'end'\n      @end_parse()\n      result : @get_result()\n      state : 'end'\n    else\n      state : 'continue'\n  # parser main routine\n  # @abstract implemented by subclasses\n  parse_main : (line) ->\n\n# parser section state manager\nclass ShioriJK.Shiori.Section\n  constructor : (@sections) ->\n    @index = 0\n  is : (section) ->\n    @sections[@index] == section\n  next : ->\n    if @index == @sections.length - 1\n      @index = 0\n    else\n      @index++\n  previous : ->\n    if @index == 0\n      @index = @sections.length - 1\n    else\n      @index--\n  set : (section) ->\n    @index = @sections.indexOf section\n  get : ->\n    @sections[@index]\n\nclass ShioriJK.Shiori.Header.Parser extends ShioriJK.Shiori.Parser\n  parse_main : (line) ->\n    result = @parse_header line\n    if result.state == 'end'\n      @section.next()\n  parse_header : (line) ->\n    if line.length\n      if result = line.match /^(.+?): (.*)$/\n        @result.header[result[1]] = result[2]\n      else\n        throw 'Invalid header line : ' + line\n      state : 'continue'\n    else\n      state : 'end'\n\nclass ShioriJK.Shiori.Header.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'header', 'end']) ->\n    @index = 0\n\n# SHIORI Request parser\nclass ShioriJK.Shiori.Request.Parser extends ShioriJK.Shiori.Parser\n  constructor : () ->\n    @parsers = {\n      request_line : new ShioriJK.Shiori.Request.RequestLine.Parser()\n      headers : new ShioriJK.Shiori.Request.Header.Parser()\n    }\n    @section = new ShioriJK.Shiori.Request.Section()\n  result_builder : ->\n    new ShioriJK.Message.Request(no_prepare: true)\n  parse_main : (line) ->\n    parser = @parsers[@section.get()]\n    parser_result = parser.parse_line line\n    if parser_result.state == 'end'\n      @result[@section.get()] = parser_result.result\n      @section.next()\n\nclass ShioriJK.Shiori.Request.RequestLine.Parser\n  constructor : () ->\n  result_builder : ->\n    new ShioriJK.RequestLine()\n  parse : (transaction) ->\n    @parse_chunk transaction\n  parse_chunk : (chunk) ->\n    @parse_line chunk\n  parse_line : (line) ->\n    result = line.match /^([A-Za-z0-9 ]+) SHIORI\\/([0-9.]+)/\n    unless result\n      throw 'Invalid request line : ' + line\n    @result = @result_builder()\n    @result.method = result[1]\n    @result.protocol = 'SHIORI'\n    @result.version = result[2]\n    result : @result\n    state : 'end'\n\nclass ShioriJK.Shiori.Request.Header.Parser extends ShioriJK.Shiori.Header.Parser\n  constructor : () ->\n    @section = new ShioriJK.Shiori.Request.Header.Section()\n  result_builder : ->\n    new ShioriJK.Headers.Request()\n\nclass ShioriJK.Shiori.Request.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'request_line', 'headers', 'end']) ->\n    @index = 0\n\nclass ShioriJK.Shiori.Request.Header.Section extends ShioriJK.Shiori.Header.Section\n\n# SHIORI Response parser\nclass ShioriJK.Shiori.Response.Parser extends ShioriJK.Shiori.Parser\n  constructor : () ->\n    @parsers = {\n      status_line : new ShioriJK.Shiori.Response.StatusLine.Parser()\n      headers : new ShioriJK.Shiori.Response.Header.Parser()\n    }\n    @section = new ShioriJK.Shiori.Response.Section()\n  result_builder : ->\n    new ShioriJK.Message.Response(no_prepare: true)\n  parse_main : (line) ->\n    parser = @parsers[@section.get()]\n    parser_result = parser.parse_line line\n    if parser_result.state == 'end'\n      @result[@section.get()] = parser_result.result\n      @section.next()\n\nclass ShioriJK.Shiori.Response.StatusLine.Parser\n  constructor : () ->\n  result_builder : ->\n    new ShioriJK.StatusLine()\n  parse : (transaction) ->\n    @parse_chunk transaction\n  parse_chunk : (chunk) ->\n    @parse_line chunk\n  parse_line : (line) ->\n    result = line.match /^SHIORI\\/([0-9.]+) (\\d+) (.+)$/\n    unless result\n      throw 'Invalid status line : ' + line\n    @result = @result_builder()\n    @result.protocol = 'SHIORI'\n    @result.version = result[1]\n    @result.code = result[2] - 0\n    result : @result\n    state : 'end'\n\nclass ShioriJK.Shiori.Response.Header.Parser extends ShioriJK.Shiori.Header.Parser\n  constructor : () ->\n    @section = new ShioriJK.Shiori.Response.Header.Section()\n  result_builder : ->\n    new ShioriJK.Headers.Response()\n\nclass ShioriJK.Shiori.Response.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'status_line', 'headers', 'end']) ->\n    @index = 0\n\nclass ShioriJK.Shiori.Response.Header.Section extends ShioriJK.Shiori.Header.Section\n"],"sourceRoot":"/source/"}