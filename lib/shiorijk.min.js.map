{"version":3,"sources":["shiorijk.coffee","shiorijk.js","shiorijk-container.coffee","shiorijk-shiori-parser.coffee"],"names":["ShioriJK","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","hasOwnProperty","module","exports","Function","property","properties","descriptions","results1","push","Object","defineProperty","Message","Request","options","no_prepare","request_line","RequestLine","headers","Headers","toString","Response","status_line","StatusLine","method","protocol","version","get","set","validate_method_version","is_valid","code","message",200,204,310,311,312,400,418,500,"header","name","value","get_separated","separator","split","set_separated","join","get_separated2","separator1","separator2","element","i","len","ref","length","set_separated2","validate","match","str","superClass","apply","arguments","Shiori","Header","Parser","is_parsing","section","is","is_parsing_end","get_result","result","result_builder","begin_parse","next","end_parse","abort_parse","parser","parsers","parse","transaction","parse_chunk","results","chunk","lines","pop","parse_lines","line","parse_line","state","parse_main","Section","sections","index","previous","indexOf","parse_header","parser_result"],"mappings":"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","file":"shiorijk.min.js","sourcesContent":["### (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 ###\n\nShioriJK = {}\n\nif module? and module.exports?\n\tmodule.exports = ShioriJK\n",null,"Function::property = (properties) ->\n\tfor property, descriptions of properties\n\t\tObject.defineProperty @prototype, property, descriptions\n\nShioriJK.Message = {}\n\n# SHIORI Request Message Container\nclass ShioriJK.Message.Request\n\t# initialize inner containers\n\t# @param options [Hash]\n\t# @option options [Boolean] no_prepare do not prepare RequestLine and Headers by the constructor\n\tconstructor : (options) ->\n\t\tunless options? and options.no_prepare\n\t\t\t@request_line = new ShioriJK.RequestLine()\n\t\t\t@headers = new ShioriJK.Headers.Request()\n\t# @property [ShioriJK.RequestLine] RequestLine Container\n\trequest_line: null\n\t# @property [ShioriJK.Headers.Request] Headers Container\n\theaders: null\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\t@request_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Response Message Container\nclass ShioriJK.Message.Response\n\t# initialize inner containers\n\t# @param options [Hash]\n\t# @option options [Boolean] no_prepare do not prepare StatusLine and Headers by the constructor\n\tconstructor : (options) ->\n\t\tunless options? and options.no_prepare\n\t\t\t@status_line = new ShioriJK.StatusLine()\n\t\t\t@headers = new ShioriJK.Headers.Response()\n\t# @property [ShioriJK.RequestLine] StatusLine Container\n\tstatus_line: null\n\t# @property [ShioriJK.Headers.Request] Headers Container\n\theaders: null\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\t@status_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Request Message's RequestLine Container\nclass ShioriJK.RequestLine\n\tconstructor : ->\n\t\t@arguments = {}\n\t# @property [String] request method\n\tmethod: null\n\t# @property [String] protocol\n\tprotocol: null\n\t# @property [String] version\n\tversion: null\n\t@property\n\t\tmethod :\n\t\t\tget : -> @arguments.method\n\t\t\tset : (method) ->\n\t\t\t\tif method? and @version?\n\t\t\t\t\t@validate_method_version method, @version\n\t\t\t\telse if method?\n\t\t\t\t\tswitch method\n\t\t\t\t\t\twhen 'GET', 'NOTIFY', 'GET Version', 'GET Sentence', 'GET Word', 'GET Status', 'TEACH', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'TRANSLATE Sentence'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow 'Invalid protocol method : ' + method\n\t\t\t\t@arguments.method = method\n\t\tprotocol :\n\t\t\tget : -> @arguments.protocol\n\t\t\tset : (protocol) ->\n\t\t\t\tif protocol? and protocol != 'SHIORI'\n\t\t\t\t\tthrow 'Invalid protocol : ' + protocol\n\t\t\t\t@arguments.protocol = protocol\n\t\tversion :\n\t\t\tget : -> @arguments.version\n\t\t\tset : (version) ->\n\t\t\t\tif @method? and version?\n\t\t\t\t\t@validate_method_version @method, version\n\t\t\t\telse if version?\n\t\t\t\t\tswitch version\n\t\t\t\t\t\twhen '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow 'Invalid protocol version : ' + version\n\t\t\t\t@arguments.version = version\n\t# validate\n\t# @param method [String] method name == 'SHIORI'\n\t# @param version [Number] version\n\t# @throw [String] if invalid\n\tvalidate_method_version : (method, version) ->\n\t\tis_valid = false\n\t\tswitch version\n\t\t\twhen '2.0'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET Version', 'NOTIFY OwnerGhostName', 'GET Sentence', 'GET Word', 'GET Status'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.2'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET Sentence'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.3'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'NOTIFY OtherGhostName', 'GET Sentence'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.4'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'TEACH'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.5'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET String'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '2.6' # spec is unknown\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET Sentence', 'GET Status', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'GET Version', 'TRANSLATE Sentence'\n\t\t\t\t\t\tis_valid = true\n\t\t\twhen '3.0'\n\t\t\t\tswitch method\n\t\t\t\t\twhen 'GET', 'NOTIFY'\n\t\t\t\t\t\tis_valid = true\n\t\tunless is_valid\n\t\t\tthrow 'Invalid protocol method and version : ' + method + ' SHIORI/' + version\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\t\"#{@method} #{@protocol}/#{@version}\"\n\n# SHIORI Response Message's StatusLine Container\nclass ShioriJK.StatusLine\n\tconstructor : ->\n\t\t@arguments = {protocol: 'SHIORI'}\n\t# @property [String] status code\n\tcode: null\n\t# @property [String] protocol\n\tprotocol: null\n\t# @property [String] version\n\tversion: null\n\t@property\n\t\tcode :\n\t\t\tget : -> @arguments.code\n\t\t\tset : (code) ->\n\t\t\t\tif code? and not @message[code]?\n\t\t\t\t\tthrow 'Invalid response code : ' + code\n\t\t\t\t@arguments.code = code\n\t\tprotocol :\n\t\t\tget : -> @arguments.protocol\n\t\t\tset : (protocol) ->\n\t\t\t\tif protocol? and protocol != 'SHIORI'\n\t\t\t\t\tthrow 'Invalid protocol : ' + protocol\n\t\t\t\t@arguments.protocol = protocol\n\t\tversion :\n\t\t\tget : -> @arguments.version\n\t\t\tset : (version) ->\n\t\t\t\tif version?\n\t\t\t\t\tswitch version\n\t\t\t\t\t\twhen '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthrow 'Invalid protocol version : ' + version\n\t\t\t\t@arguments.version = version\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\t\"#{@protocol}/#{@version} #{@code} #{@message[@code]}\"\n\t# @property [Hash<Number, String>] status messages for status codes\n\tmessage:\n\t\t200 : 'OK'\n\t\t204 : 'No Content'\n\t\t310 : 'Communicate'\n\t\t311 : 'Not Enough'\n\t\t312 : 'Advice'\n\t\t400 : 'Bad Request'\n\t\t418 : \"I'm a tea pot\"\n\t\t500 : 'Internal Server Error'\n\n# SHIORI Message Headers Container\nclass ShioriJK.Headers\n\tconstructor : ->\n\t\t@header = {}\n\t# @property [Hash<String, String>] headers\n\theader: null\n\t# get header\n\t# @param name [String] header name\n\t# @return [String] header value\n\tget : (name) ->\n\t\tif @header[name]?\n\t\t\t@header[name]\n\t# set header\n\t# @param name [String] header name\n\t# @param value [String] header value\n\t# @return [String] header value\n\tset : (name, value) ->\n\t\t@header[name] = value\n\t# get header separated by \\x01 or some as an array\n\t# @param name [String] header name\n\t# @param separator [String] separator characters\n\t# @return [Array<String>] header values\n\tget_separated : (name, separator = '\\x01') ->\n\t\tif @header[name]?\n\t\t\t@header[name].split separator\n\t# set header separated by \\x01 or some as an array\n\t# @param name [String] header name\n\t# @param value [Array<String>] header values\n\t# @param separator [String] separator characters\n\t# @return [String] header value\n\tset_separated : (name, value, separator = '\\x01') ->\n\t\t@header[name] = value.join separator\n\t# get header separated by \\x02 and \\x01 or some as an array\n\t# @param name [String] header name\n\t# @param separator1 [String] first level separator characters\n\t# @param separator2 [String] second level separator characters\n\t# @return [Array<Array<String>>] header values\n\tget_separated2 : (name, separator1 = '\\x02', separator2 = '\\x01') ->\n\t\tif @header[name]?\n\t\t\t((element.split separator2) for element in @header[name].split separator1)\n\t# set header separated by \\x02 and \\x01 or some as an array\n\t# @param name [String] header name\n\t# @param value [Array<Array<String>>] header values\n\t# @param separator1 [String] first level separator characters\n\t# @param separator2 [String] second level separator characters\n\t# @return [String] header value\n\tset_separated2 : (name, value, separator1 = '\\x02', separator2 = '\\x01') ->\n\t\t@header[name] = (element.join separator2 for element in value).join separator1\n\t# check that headers are line feed free\n\t# @throw [String] if not\n\tvalidate : ->\n\t\tfor name, value of @header\n\t\t\tif value.match /\\n/\n\t\t\t\tthrow 'Invalid header value - line feed found : [' + name + '] : ' + value\n\t# Message to string\n\t# @return [String] message string\n\ttoString : ->\n\t\tstr = ''\n\t\t@validate()\n\t\tfor name, value of @header\n\t\t\tstr += \"#{name}: #{value}\\r\\n\"\n\t\tstr\n\n# SHIORI Request Message Headers Container\nclass ShioriJK.Headers.Request extends ShioriJK.Headers\n\n# SHIORI Response Message Headers Container\nclass ShioriJK.Headers.Response extends ShioriJK.Headers\n\n","ShioriJK.Shiori = {}\nShioriJK.Shiori.Header = {}\nShioriJK.Shiori.Request = {}\nShioriJK.Shiori.Request.RequestLine = {}\nShioriJK.Shiori.Request.Header = {}\nShioriJK.Shiori.Response = {}\nShioriJK.Shiori.Response.StatusLine = {}\nShioriJK.Shiori.Response.Header = {}\n\n# parser base class\nclass ShioriJK.Shiori.Parser\n\t# @return [Boolean]\n\tis_parsing : ->\n\t\tnot @section.is 'idle'\n\t# @return [Boolean]\n\tis_parsing_end : ->\n\t\tnot @section.is 'end'\n\t# get parser result\n\t# @return result\n\tget_result : ->\n\t\t@result\n\t# build result container\n\t# @abstract used by subclasses\n\t# @return empty result container\n\tresult_builder : ->\n\t# set section state to first section\n\t# @throw [String] if before section != 'idle'\n\tbegin_parse : ->\n\t\tunless @section.is 'idle'\n\t\t\tthrow 'cannot begin parsing because previous transaction is still working'\n\t\t@result = @result_builder()\n\t\t@section.next()\n\t# set section state to begining section\n\t# @throw [String] if before section != 'end'\n\tend_parse : ->\n\t\tunless @section.is 'end'\n\t\t\t@abort_parse()\n\t\t\tthrow 'parsing was aborted'\n\t\t@section.next()\n\t# set section state to begining section FORCE!\n\t# @note recursively abort parsing\n\tabort_parse : ->\n\t\tif @parsers?\n\t\t\tfor name, parser of @parsers\n\t\t\t\tparser.abort_parse() if parser.abort_parse?\n\t\t@section.set 'idle'\n\t# parse a transaction\n\t# @param transaction [String] complete transaction\n\t# @return parse_chunk()'s one result\n\t# @throw [String] if transaction is not complete\n\tparse : (transaction) ->\n\t\t@begin_parse()\n\t\tresult = @parse_chunk transaction\n\t\tif @is_parsing()\n\t\t\tthrow 'transaction is not closed'\n\t\tif result.results.length != 1\n\t\t\tthrow 'multiple transaction'\n\t\tresult.results[0]\n\t# parse transaction chunk\n\t# @param chunk [String] transaction chunk\n\t# @return [Array] parse_lines()'s results\n\tparse_chunk : (chunk) ->\n\t\tlines = chunk.split /\\r\\n/\n\t\tif chunk.match /\\r\\n$/\n\t\t\tlines.pop()\n\t\t@parse_lines lines\n\t# parse chunk lines\n\t# @param lines [Array<String>] transaction chunk separated by \\r\\n\n\t# @return [Hash] {results: parse_line()'s result, state: parser state}\n\tparse_lines : (lines) ->\n\t\tresults = []\n\t\tfor line in lines\n\t\t\tresult = @parse_line line\n\t\t\tif result.state == 'end'\n\t\t\t\tresults.push result.result\n\t\tresults : results\n\t\tstate : result.state\n\t# parse line\n\t# @param line [String] transaction line separated by \\r\\n\n\t# @return [Hash] {results: result (if state is end), state: parser state}\n\tparse_line : (line) ->\n\t\tif @section.is 'idle'\n\t\t\t@begin_parse()\n\t\t@parse_main line\n\t\tif @section.is 'end'\n\t\t\t@end_parse()\n\t\t\tresult : @get_result()\n\t\t\tstate : 'end'\n\t\telse\n\t\t\tstate : 'continue'\n\t# parser main routine\n\t# @abstract implemented by subclasses\n\tparse_main : (line) ->\n\n# parser section state manager\nclass ShioriJK.Shiori.Section\n\tconstructor : (@sections) ->\n\t\t@index = 0\n\tis : (section) ->\n\t\t@sections[@index] == section\n\tnext : ->\n\t\tif @index == @sections.length - 1\n\t\t\t@index = 0\n\t\telse\n\t\t\t@index++\n\tprevious : ->\n\t\tif @index == 0\n\t\t\t@index = @sections.length - 1\n\t\telse\n\t\t\t@index--\n\tset : (section) ->\n\t\t@index = @sections.indexOf section\n\tget : ->\n\t\t@sections[@index]\n\nclass ShioriJK.Shiori.Header.Parser extends ShioriJK.Shiori.Parser\n\tparse_main : (line) ->\n\t\tresult = @parse_header line\n\t\tif result.state == 'end'\n\t\t\t@section.next()\n\tparse_header : (line) ->\n\t\tif line.length\n\t\t\tif result = line.match /^(.+?): (.*)$/\n\t\t\t\t@result.header[result[1]] = result[2]\n\t\t\telse\n\t\t\t\tthrow 'Invalid header line : ' + line\n\t\t\tstate : 'continue'\n\t\telse\n\t\t\tstate : 'end'\n\nclass ShioriJK.Shiori.Header.Section extends ShioriJK.Shiori.Section\n\tconstructor : (@sections = ['idle', 'header', 'end']) ->\n\t\t@index = 0\n\n# SHIORI Request parser\nclass ShioriJK.Shiori.Request.Parser extends ShioriJK.Shiori.Parser\n\tconstructor : () ->\n\t\t@parsers = {\n\t\t\trequest_line : new ShioriJK.Shiori.Request.RequestLine.Parser()\n\t\t\theaders : new ShioriJK.Shiori.Request.Header.Parser()\n\t\t}\n\t\t@section = new ShioriJK.Shiori.Request.Section()\n\tresult_builder : ->\n\t\tnew ShioriJK.Message.Request(no_prepare: true)\n\tparse_main : (line) ->\n\t\tparser = @parsers[@section.get()]\n\t\tparser_result = parser.parse_line line\n\t\tif parser_result.state == 'end'\n\t\t\t@result[@section.get()] = parser_result.result\n\t\t\t@section.next()\n\nclass ShioriJK.Shiori.Request.RequestLine.Parser\n\tconstructor : () ->\n\tresult_builder : ->\n\t\tnew ShioriJK.RequestLine()\n\tparse : (transaction) ->\n\t\t@parse_chunk transaction\n\tparse_chunk : (chunk) ->\n\t\t@parse_line chunk\n\tparse_line : (line) ->\n\t\tresult = line.match /^([A-Za-z0-9 ]+) SHIORI\\/([0-9.]+)/\n\t\tunless result\n\t\t\tthrow 'Invalid request line : ' + line\n\t\t@result = @result_builder()\n\t\t@result.method = result[1]\n\t\t@result.protocol = 'SHIORI'\n\t\t@result.version = result[2]\n\t\tresult : @result\n\t\tstate : 'end'\n\nclass ShioriJK.Shiori.Request.Header.Parser extends ShioriJK.Shiori.Header.Parser\n\tconstructor : () ->\n\t\t@section = new ShioriJK.Shiori.Request.Header.Section()\n\tresult_builder : ->\n\t\tnew ShioriJK.Headers.Request()\n\nclass ShioriJK.Shiori.Request.Section extends ShioriJK.Shiori.Section\n\tconstructor : (@sections = ['idle', 'request_line', 'headers', 'end']) ->\n\t\t@index = 0\n\nclass ShioriJK.Shiori.Request.Header.Section extends ShioriJK.Shiori.Header.Section\n\n# SHIORI Response parser\nclass ShioriJK.Shiori.Response.Parser extends ShioriJK.Shiori.Parser\n\tconstructor : () ->\n\t\t@parsers = {\n\t\t\tstatus_line : new ShioriJK.Shiori.Response.StatusLine.Parser()\n\t\t\theaders : new ShioriJK.Shiori.Response.Header.Parser()\n\t\t}\n\t\t@section = new ShioriJK.Shiori.Response.Section()\n\tresult_builder : ->\n\t\tnew ShioriJK.Message.Response(no_prepare: true)\n\tparse_main : (line) ->\n\t\tparser = @parsers[@section.get()]\n\t\tparser_result = parser.parse_line line\n\t\tif parser_result.state == 'end'\n\t\t\t@result[@section.get()] = parser_result.result\n\t\t\t@section.next()\n\nclass ShioriJK.Shiori.Response.StatusLine.Parser\n\tconstructor : () ->\n\tresult_builder : ->\n\t\tnew ShioriJK.StatusLine()\n\tparse : (transaction) ->\n\t\t@parse_chunk transaction\n\tparse_chunk : (chunk) ->\n\t\t@parse_line chunk\n\tparse_line : (line) ->\n\t\tresult = line.match /^SHIORI\\/([0-9.]+) (\\d+) (.+)$/\n\t\tunless result\n\t\t\tthrow 'Invalid status line : ' + line\n\t\t@result = @result_builder()\n\t\t@result.protocol = 'SHIORI'\n\t\t@result.version = result[1]\n\t\t@result.code = result[2] - 0\n\t\tresult : @result\n\t\tstate : 'end'\n\nclass ShioriJK.Shiori.Response.Header.Parser extends ShioriJK.Shiori.Header.Parser\n\tconstructor : () ->\n\t\t@section = new ShioriJK.Shiori.Response.Header.Section()\n\tresult_builder : ->\n\t\tnew ShioriJK.Headers.Response()\n\nclass ShioriJK.Shiori.Response.Section extends ShioriJK.Shiori.Section\n\tconstructor : (@sections = ['idle', 'status_line', 'headers', 'end']) ->\n\t\t@index = 0\n\nclass ShioriJK.Shiori.Response.Header.Section extends ShioriJK.Shiori.Header.Section\n"],"sourceRoot":"/source/"}