{"version":3,"sources":["shiorijk.coffee","shiorijk.js","shiorijk-container.coffee","shiorijk-shiori-parser.coffee"],"names":["ShioriJK","extend","child","parent","ctor","this","constructor","key","hasProp","call","prototype","__super__","hasOwnProperty","module","exports","Function","property","properties","descriptions","results1","push","Object","defineProperty","Message","Request","arg","headers","no_prepare","ref","request_line","RequestLine","Headers","toString","Response","status_line","StatusLine","method","protocol","version","get","set","validate_method_version","is_valid","code","message",200,204,310,311,312,400,418,500,"header","name","value","get_separated","separator","split","set_separated","join","get_separated2","separator1","separator2","element","i","len","length","set_separated2","validate","match","str","superClass","apply","arguments","Shiori","Header","Parser","is_parsing","section","is","is_parsing_end","get_result","result","result_builder","begin_parse","next","end_parse","abort_parse","parser","parsers","parse","transaction","parse_chunk","results","chunk","lines","pop","parse_lines","line","parse_line","state","parse_main","Section","sections","index","previous","indexOf","parse_header","parser_result"],"mappings":"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","file":"shiorijk.min.js","sourcesContent":["### (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 ###\n\nShioriJK = {}\n\nif module? and module.exports?\n  module.exports = ShioriJK\n","\n/* (C) 2014 Narazaka : Licensed under The MIT License - http://narazaka.net/license/MIT?2014 */\nvar ShioriJK,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nShioriJK = {};\n\nif ((typeof module !== \"undefined\" && module !== null) && (module.exports != null)) {\n  module.exports = ShioriJK;\n}\n\nFunction.prototype.property = function(properties) {\n  var descriptions, property, results1;\n  results1 = [];\n  for (property in properties) {\n    descriptions = properties[property];\n    results1.push(Object.defineProperty(this.prototype, property, descriptions));\n  }\n  return results1;\n};\n\nShioriJK.Message = {};\n\nShioriJK.Message.Request = (function() {\n  function Request(arg) {\n    var headers, no_prepare, ref, request_line;\n    ref = arg != null ? arg : {}, request_line = ref.request_line, headers = ref.headers, no_prepare = ref.no_prepare;\n    this.request_line = request_line != null ? request_line instanceof ShioriJK.RequestLine ? request_line : new ShioriJK.RequestLine(request_line) : !no_prepare ? new ShioriJK.RequestLine() : void 0;\n    this.headers = headers != null ? headers instanceof ShioriJK.Headers.Request ? headers : new ShioriJK.Headers.Request(headers) : new ShioriJK.Headers.Request();\n  }\n\n  Request.prototype.request_line = null;\n\n  Request.prototype.headers = null;\n\n  Request.prototype.toString = function() {\n    return this.request_line.toString() + '\\r\\n' + this.headers.toString() + '\\r\\n';\n  };\n\n  return Request;\n\n})();\n\nShioriJK.Message.Response = (function() {\n  function Response(arg) {\n    var headers, no_prepare, ref, status_line;\n    ref = arg != null ? arg : {}, status_line = ref.status_line, headers = ref.headers, no_prepare = ref.no_prepare;\n    this.status_line = status_line != null ? status_line instanceof ShioriJK.StatusLine ? status_line : new ShioriJK.StatusLine(status_line) : !no_prepare ? new ShioriJK.StatusLine() : void 0;\n    this.headers = headers != null ? headers instanceof ShioriJK.Headers.Response ? headers : new ShioriJK.Headers.Response(headers) : new ShioriJK.Headers.Response();\n  }\n\n  Response.prototype.status_line = null;\n\n  Response.prototype.headers = null;\n\n  Response.prototype.toString = function() {\n    return this.status_line.toString() + '\\r\\n' + this.headers.toString() + '\\r\\n';\n  };\n\n  return Response;\n\n})();\n\nShioriJK.RequestLine = (function() {\n  function RequestLine(arg) {\n    var method, protocol, ref, version;\n    ref = arg != null ? arg : {}, method = ref.method, protocol = ref.protocol, version = ref.version;\n    this[\"arguments\"] = {};\n    if (method != null) {\n      this.method = method;\n    }\n    this.protocol = protocol || 'SHIORI';\n    if (version != null) {\n      this.version = version;\n    }\n  }\n\n  RequestLine.prototype.method = null;\n\n  RequestLine.prototype.protocol = null;\n\n  RequestLine.prototype.version = null;\n\n  RequestLine.property({\n    method: {\n      get: function() {\n        return this[\"arguments\"].method;\n      },\n      set: function(method) {\n        if ((method != null) && (this.version != null)) {\n          this.validate_method_version(method, this.version);\n        } else if (method != null) {\n          switch (method) {\n            case 'GET':\n            case 'NOTIFY':\n            case 'GET Version':\n            case 'GET Sentence':\n            case 'GET Word':\n            case 'GET Status':\n            case 'TEACH':\n            case 'GET String':\n            case 'NOTIFY OwnerGhostName':\n            case 'NOTIFY OtherGhostName':\n            case 'TRANSLATE Sentence':\n              break;\n            default:\n              throw 'Invalid protocol method : ' + method;\n          }\n        }\n        return this[\"arguments\"].method = method;\n      }\n    },\n    protocol: {\n      get: function() {\n        return this[\"arguments\"].protocol;\n      },\n      set: function(protocol) {\n        if ((protocol != null) && protocol !== 'SHIORI') {\n          throw 'Invalid protocol : ' + protocol;\n        }\n        return this[\"arguments\"].protocol = protocol;\n      }\n    },\n    version: {\n      get: function() {\n        return this[\"arguments\"].version;\n      },\n      set: function(version) {\n        if ((this.method != null) && (version != null)) {\n          this.validate_method_version(this.method, version);\n        } else if (version != null) {\n          switch (version) {\n            case '2.0':\n            case '2.2':\n            case '2.3':\n            case '2.4':\n            case '2.5':\n            case '2.6':\n            case '3.0':\n              break;\n            default:\n              throw 'Invalid protocol version : ' + version;\n          }\n        }\n        return this[\"arguments\"].version = version;\n      }\n    }\n  });\n\n  RequestLine.prototype.validate_method_version = function(method, version) {\n    var is_valid;\n    is_valid = false;\n    switch (version) {\n      case '2.0':\n        switch (method) {\n          case 'GET Version':\n          case 'NOTIFY OwnerGhostName':\n          case 'GET Sentence':\n          case 'GET Word':\n          case 'GET Status':\n            is_valid = true;\n        }\n        break;\n      case '2.2':\n        switch (method) {\n          case 'GET Sentence':\n            is_valid = true;\n        }\n        break;\n      case '2.3':\n        switch (method) {\n          case 'NOTIFY OtherGhostName':\n          case 'GET Sentence':\n            is_valid = true;\n        }\n        break;\n      case '2.4':\n        switch (method) {\n          case 'TEACH':\n            is_valid = true;\n        }\n        break;\n      case '2.5':\n        switch (method) {\n          case 'GET String':\n            is_valid = true;\n        }\n        break;\n      case '2.6':\n        switch (method) {\n          case 'GET Sentence':\n          case 'GET Status':\n          case 'GET String':\n          case 'NOTIFY OwnerGhostName':\n          case 'NOTIFY OtherGhostName':\n          case 'GET Version':\n          case 'TRANSLATE Sentence':\n            is_valid = true;\n        }\n        break;\n      case '3.0':\n        switch (method) {\n          case 'GET':\n          case 'NOTIFY':\n            is_valid = true;\n        }\n    }\n    if (!is_valid) {\n      throw 'Invalid protocol method and version : ' + method + ' SHIORI/' + version;\n    }\n  };\n\n  RequestLine.prototype.toString = function() {\n    return this.method + \" \" + this.protocol + \"/\" + this.version;\n  };\n\n  return RequestLine;\n\n})();\n\nShioriJK.StatusLine = (function() {\n  function StatusLine(arg) {\n    var code, protocol, ref, version;\n    ref = arg != null ? arg : {}, code = ref.code, protocol = ref.protocol, version = ref.version;\n    this[\"arguments\"] = {};\n    if (code != null) {\n      this.code = code;\n    }\n    this.protocol = protocol || 'SHIORI';\n    if (version != null) {\n      this.version = version;\n    }\n  }\n\n  StatusLine.prototype.code = null;\n\n  StatusLine.prototype.protocol = null;\n\n  StatusLine.prototype.version = null;\n\n  StatusLine.property({\n    code: {\n      get: function() {\n        return this[\"arguments\"].code;\n      },\n      set: function(code) {\n        if ((code != null) && (this.message[code] == null)) {\n          throw 'Invalid response code : ' + code;\n        }\n        return this[\"arguments\"].code = code;\n      }\n    },\n    protocol: {\n      get: function() {\n        return this[\"arguments\"].protocol;\n      },\n      set: function(protocol) {\n        if ((protocol != null) && protocol !== 'SHIORI') {\n          throw 'Invalid protocol : ' + protocol;\n        }\n        return this[\"arguments\"].protocol = protocol;\n      }\n    },\n    version: {\n      get: function() {\n        return this[\"arguments\"].version;\n      },\n      set: function(version) {\n        if (version != null) {\n          switch (version) {\n            case '2.0':\n            case '2.2':\n            case '2.3':\n            case '2.4':\n            case '2.5':\n            case '2.6':\n            case '3.0':\n              break;\n            default:\n              throw 'Invalid protocol version : ' + version;\n          }\n        }\n        return this[\"arguments\"].version = version;\n      }\n    }\n  });\n\n  StatusLine.prototype.toString = function() {\n    return this.protocol + \"/\" + this.version + \" \" + this.code + \" \" + this.message[this.code];\n  };\n\n  StatusLine.prototype.message = {\n    200: 'OK',\n    204: 'No Content',\n    310: 'Communicate',\n    311: 'Not Enough',\n    312: 'Advice',\n    400: 'Bad Request',\n    418: \"I'm a tea pot\",\n    500: 'Internal Server Error'\n  };\n\n  return StatusLine;\n\n})();\n\nShioriJK.Headers = (function() {\n  function Headers(header) {\n    this.header = header != null ? header : {};\n  }\n\n  Headers.prototype.header = null;\n\n  Headers.prototype.get = function(name) {\n    if (this.header[name] != null) {\n      return this.header[name];\n    }\n  };\n\n  Headers.prototype.set = function(name, value) {\n    return this.header[name] = value;\n  };\n\n  Headers.prototype.get_separated = function(name, separator) {\n    if (separator == null) {\n      separator = '\\x01';\n    }\n    if (this.header[name] != null) {\n      return this.header[name].split(separator);\n    }\n  };\n\n  Headers.prototype.set_separated = function(name, value, separator) {\n    if (separator == null) {\n      separator = '\\x01';\n    }\n    return this.header[name] = value.join(separator);\n  };\n\n  Headers.prototype.get_separated2 = function(name, separator1, separator2) {\n    var element, i, len, ref, results1;\n    if (separator1 == null) {\n      separator1 = '\\x02';\n    }\n    if (separator2 == null) {\n      separator2 = '\\x01';\n    }\n    if (this.header[name] != null) {\n      ref = this.header[name].split(separator1);\n      results1 = [];\n      for (i = 0, len = ref.length; i < len; i++) {\n        element = ref[i];\n        results1.push(element.split(separator2));\n      }\n      return results1;\n    }\n  };\n\n  Headers.prototype.set_separated2 = function(name, value, separator1, separator2) {\n    var element;\n    if (separator1 == null) {\n      separator1 = '\\x02';\n    }\n    if (separator2 == null) {\n      separator2 = '\\x01';\n    }\n    return this.header[name] = ((function() {\n      var i, len, results1;\n      results1 = [];\n      for (i = 0, len = value.length; i < len; i++) {\n        element = value[i];\n        results1.push(element.join(separator2));\n      }\n      return results1;\n    })()).join(separator1);\n  };\n\n  Headers.prototype.validate = function() {\n    var name, ref, results1, value;\n    ref = this.header;\n    results1 = [];\n    for (name in ref) {\n      value = ref[name];\n      if ((\"\" + value).match(/\\n/)) {\n        throw 'Invalid header value - line feed found : [' + name + '] : ' + value;\n      } else {\n        results1.push(void 0);\n      }\n    }\n    return results1;\n  };\n\n  Headers.prototype.toString = function() {\n    var name, ref, str, value;\n    str = '';\n    this.validate();\n    ref = this.header;\n    for (name in ref) {\n      value = ref[name];\n      str += name + \": \" + value + \"\\r\\n\";\n    }\n    return str;\n  };\n\n  return Headers;\n\n})();\n\nShioriJK.Headers.Request = (function(superClass) {\n  extend(Request, superClass);\n\n  function Request() {\n    return Request.__super__.constructor.apply(this, arguments);\n  }\n\n  return Request;\n\n})(ShioriJK.Headers);\n\nShioriJK.Headers.Response = (function(superClass) {\n  extend(Response, superClass);\n\n  function Response() {\n    return Response.__super__.constructor.apply(this, arguments);\n  }\n\n  return Response;\n\n})(ShioriJK.Headers);\n\nShioriJK.Shiori = {};\n\nShioriJK.Shiori.Header = {};\n\nShioriJK.Shiori.Request = {};\n\nShioriJK.Shiori.Request.RequestLine = {};\n\nShioriJK.Shiori.Request.Header = {};\n\nShioriJK.Shiori.Response = {};\n\nShioriJK.Shiori.Response.StatusLine = {};\n\nShioriJK.Shiori.Response.Header = {};\n\nShioriJK.Shiori.Parser = (function() {\n  function Parser() {}\n\n  Parser.prototype.is_parsing = function() {\n    return !this.section.is('idle');\n  };\n\n  Parser.prototype.is_parsing_end = function() {\n    return !this.section.is('end');\n  };\n\n  Parser.prototype.get_result = function() {\n    return this.result;\n  };\n\n  Parser.prototype.result_builder = function() {};\n\n  Parser.prototype.begin_parse = function() {\n    if (!this.section.is('idle')) {\n      throw 'cannot begin parsing because previous transaction is still working';\n    }\n    this.result = this.result_builder();\n    return this.section.next();\n  };\n\n  Parser.prototype.end_parse = function() {\n    if (!this.section.is('end')) {\n      this.abort_parse();\n      throw 'parsing was aborted';\n    }\n    return this.section.next();\n  };\n\n  Parser.prototype.abort_parse = function() {\n    var name, parser, ref;\n    if (this.parsers != null) {\n      ref = this.parsers;\n      for (name in ref) {\n        parser = ref[name];\n        if (parser.abort_parse != null) {\n          parser.abort_parse();\n        }\n      }\n    }\n    return this.section.set('idle');\n  };\n\n  Parser.prototype.parse = function(transaction) {\n    var result;\n    this.begin_parse();\n    result = this.parse_chunk(transaction);\n    if (this.is_parsing()) {\n      throw 'transaction is not closed';\n    }\n    if (result.results.length !== 1) {\n      throw 'multiple transaction';\n    }\n    return result.results[0];\n  };\n\n  Parser.prototype.parse_chunk = function(chunk) {\n    var lines;\n    lines = chunk.split(/\\r\\n/);\n    if (chunk.match(/\\r\\n$/)) {\n      lines.pop();\n    }\n    return this.parse_lines(lines);\n  };\n\n  Parser.prototype.parse_lines = function(lines) {\n    var i, len, line, result, results;\n    results = [];\n    for (i = 0, len = lines.length; i < len; i++) {\n      line = lines[i];\n      result = this.parse_line(line);\n      if (result.state === 'end') {\n        results.push(result.result);\n      }\n    }\n    return {\n      results: results,\n      state: result.state\n    };\n  };\n\n  Parser.prototype.parse_line = function(line) {\n    if (this.section.is('idle')) {\n      this.begin_parse();\n    }\n    this.parse_main(line);\n    if (this.section.is('end')) {\n      this.end_parse();\n      return {\n        result: this.get_result(),\n        state: 'end'\n      };\n    } else {\n      return {\n        state: 'continue'\n      };\n    }\n  };\n\n  Parser.prototype.parse_main = function(line) {};\n\n  return Parser;\n\n})();\n\nShioriJK.Shiori.Section = (function() {\n  function Section(sections) {\n    this.sections = sections;\n    this.index = 0;\n  }\n\n  Section.prototype.is = function(section) {\n    return this.sections[this.index] === section;\n  };\n\n  Section.prototype.next = function() {\n    if (this.index === this.sections.length - 1) {\n      return this.index = 0;\n    } else {\n      return this.index++;\n    }\n  };\n\n  Section.prototype.previous = function() {\n    if (this.index === 0) {\n      return this.index = this.sections.length - 1;\n    } else {\n      return this.index--;\n    }\n  };\n\n  Section.prototype.set = function(section) {\n    return this.index = this.sections.indexOf(section);\n  };\n\n  Section.prototype.get = function() {\n    return this.sections[this.index];\n  };\n\n  return Section;\n\n})();\n\nShioriJK.Shiori.Header.Parser = (function(superClass) {\n  extend(Parser, superClass);\n\n  function Parser() {\n    return Parser.__super__.constructor.apply(this, arguments);\n  }\n\n  Parser.prototype.parse_main = function(line) {\n    var result;\n    result = this.parse_header(line);\n    if (result.state === 'end') {\n      return this.section.next();\n    }\n  };\n\n  Parser.prototype.parse_header = function(line) {\n    var result;\n    if (line.length) {\n      if (result = line.match(/^(.+?): (.*)$/)) {\n        this.result.header[result[1]] = result[2];\n      } else {\n        throw 'Invalid header line : ' + line;\n      }\n      return {\n        state: 'continue'\n      };\n    } else {\n      return {\n        state: 'end'\n      };\n    }\n  };\n\n  return Parser;\n\n})(ShioriJK.Shiori.Parser);\n\nShioriJK.Shiori.Header.Section = (function(superClass) {\n  extend(Section, superClass);\n\n  function Section(sections) {\n    this.sections = sections != null ? sections : ['idle', 'header', 'end'];\n    this.index = 0;\n  }\n\n  return Section;\n\n})(ShioriJK.Shiori.Section);\n\nShioriJK.Shiori.Request.Parser = (function(superClass) {\n  extend(Parser, superClass);\n\n  function Parser() {\n    this.parsers = {\n      request_line: new ShioriJK.Shiori.Request.RequestLine.Parser(),\n      headers: new ShioriJK.Shiori.Request.Header.Parser()\n    };\n    this.section = new ShioriJK.Shiori.Request.Section();\n  }\n\n  Parser.prototype.result_builder = function() {\n    return new ShioriJK.Message.Request({\n      no_prepare: true\n    });\n  };\n\n  Parser.prototype.parse_main = function(line) {\n    var parser, parser_result;\n    parser = this.parsers[this.section.get()];\n    parser_result = parser.parse_line(line);\n    if (parser_result.state === 'end') {\n      this.result[this.section.get()] = parser_result.result;\n      return this.section.next();\n    }\n  };\n\n  return Parser;\n\n})(ShioriJK.Shiori.Parser);\n\nShioriJK.Shiori.Request.RequestLine.Parser = (function() {\n  function Parser() {}\n\n  Parser.prototype.result_builder = function() {\n    return new ShioriJK.RequestLine();\n  };\n\n  Parser.prototype.parse = function(transaction) {\n    return this.parse_chunk(transaction);\n  };\n\n  Parser.prototype.parse_chunk = function(chunk) {\n    return this.parse_line(chunk);\n  };\n\n  Parser.prototype.parse_line = function(line) {\n    var result;\n    result = line.match(/^([A-Za-z0-9 ]+) SHIORI\\/([0-9.]+)/);\n    if (!result) {\n      throw 'Invalid request line : ' + line;\n    }\n    this.result = this.result_builder();\n    this.result.method = result[1];\n    this.result.protocol = 'SHIORI';\n    this.result.version = result[2];\n    return {\n      result: this.result,\n      state: 'end'\n    };\n  };\n\n  return Parser;\n\n})();\n\nShioriJK.Shiori.Request.Header.Parser = (function(superClass) {\n  extend(Parser, superClass);\n\n  function Parser() {\n    this.section = new ShioriJK.Shiori.Request.Header.Section();\n  }\n\n  Parser.prototype.result_builder = function() {\n    return new ShioriJK.Headers.Request();\n  };\n\n  return Parser;\n\n})(ShioriJK.Shiori.Header.Parser);\n\nShioriJK.Shiori.Request.Section = (function(superClass) {\n  extend(Section, superClass);\n\n  function Section(sections) {\n    this.sections = sections != null ? sections : ['idle', 'request_line', 'headers', 'end'];\n    this.index = 0;\n  }\n\n  return Section;\n\n})(ShioriJK.Shiori.Section);\n\nShioriJK.Shiori.Request.Header.Section = (function(superClass) {\n  extend(Section, superClass);\n\n  function Section() {\n    return Section.__super__.constructor.apply(this, arguments);\n  }\n\n  return Section;\n\n})(ShioriJK.Shiori.Header.Section);\n\nShioriJK.Shiori.Response.Parser = (function(superClass) {\n  extend(Parser, superClass);\n\n  function Parser() {\n    this.parsers = {\n      status_line: new ShioriJK.Shiori.Response.StatusLine.Parser(),\n      headers: new ShioriJK.Shiori.Response.Header.Parser()\n    };\n    this.section = new ShioriJK.Shiori.Response.Section();\n  }\n\n  Parser.prototype.result_builder = function() {\n    return new ShioriJK.Message.Response({\n      no_prepare: true\n    });\n  };\n\n  Parser.prototype.parse_main = function(line) {\n    var parser, parser_result;\n    parser = this.parsers[this.section.get()];\n    parser_result = parser.parse_line(line);\n    if (parser_result.state === 'end') {\n      this.result[this.section.get()] = parser_result.result;\n      return this.section.next();\n    }\n  };\n\n  return Parser;\n\n})(ShioriJK.Shiori.Parser);\n\nShioriJK.Shiori.Response.StatusLine.Parser = (function() {\n  function Parser() {}\n\n  Parser.prototype.result_builder = function() {\n    return new ShioriJK.StatusLine();\n  };\n\n  Parser.prototype.parse = function(transaction) {\n    return this.parse_chunk(transaction);\n  };\n\n  Parser.prototype.parse_chunk = function(chunk) {\n    return this.parse_line(chunk);\n  };\n\n  Parser.prototype.parse_line = function(line) {\n    var result;\n    result = line.match(/^SHIORI\\/([0-9.]+) (\\d+) (.+)$/);\n    if (!result) {\n      throw 'Invalid status line : ' + line;\n    }\n    this.result = this.result_builder();\n    this.result.protocol = 'SHIORI';\n    this.result.version = result[1];\n    this.result.code = result[2] - 0;\n    return {\n      result: this.result,\n      state: 'end'\n    };\n  };\n\n  return Parser;\n\n})();\n\nShioriJK.Shiori.Response.Header.Parser = (function(superClass) {\n  extend(Parser, superClass);\n\n  function Parser() {\n    this.section = new ShioriJK.Shiori.Response.Header.Section();\n  }\n\n  Parser.prototype.result_builder = function() {\n    return new ShioriJK.Headers.Response();\n  };\n\n  return Parser;\n\n})(ShioriJK.Shiori.Header.Parser);\n\nShioriJK.Shiori.Response.Section = (function(superClass) {\n  extend(Section, superClass);\n\n  function Section(sections) {\n    this.sections = sections != null ? sections : ['idle', 'status_line', 'headers', 'end'];\n    this.index = 0;\n  }\n\n  return Section;\n\n})(ShioriJK.Shiori.Section);\n\nShioriJK.Shiori.Response.Header.Section = (function(superClass) {\n  extend(Section, superClass);\n\n  function Section() {\n    return Section.__super__.constructor.apply(this, arguments);\n  }\n\n  return Section;\n\n})(ShioriJK.Shiori.Header.Section);\n","Function::property = (properties) ->\n  for property, descriptions of properties\n    Object.defineProperty @prototype, property, descriptions\n\nShioriJK.Message = {}\n\n# SHIORI Request Message Container\nclass ShioriJK.Message.Request\n  # initialize inner containers\n  # @param request_line [Hash|ShioriJK.Requestline] request line\n  # @param headers [Hash|ShioriJK.Headers.Request] request headers\n  # @param no_prepare [Boolean] do not prepare default RequestLine and Headers by the constructor\n  constructor : ({request_line, headers, no_prepare} = {}) ->\n    @request_line =\n      if request_line?\n        if request_line instanceof ShioriJK.RequestLine\n          request_line\n        else\n          new ShioriJK.RequestLine(request_line)\n      else if not no_prepare\n        new ShioriJK.RequestLine()\n    @headers =\n      if headers?\n        if headers instanceof ShioriJK.Headers.Request\n          headers\n        else\n          new ShioriJK.Headers.Request(headers)\n      else\n        new ShioriJK.Headers.Request()\n  # @property [ShioriJK.RequestLine] RequestLine Container\n  request_line: null\n  # @property [ShioriJK.Headers.Request] Headers Container\n  headers: null\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    @request_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Response Message Container\nclass ShioriJK.Message.Response\n  # initialize inner containers\n  # @param status_line [Hash|ShioriJK.Statusline] status line\n  # @param headers [Hash|ShioriJK.Headers.Response] response headers\n  # @param no_prepare [Boolean] do not prepare default StatusLine and Headers by the constructor\n  constructor : ({status_line, headers, no_prepare} = {}) ->\n    @status_line =\n      if status_line?\n        if status_line instanceof ShioriJK.StatusLine\n          status_line\n        else\n          new ShioriJK.StatusLine(status_line)\n      else if not no_prepare\n        new ShioriJK.StatusLine()\n    @headers =\n      if headers?\n        if headers instanceof ShioriJK.Headers.Response\n          headers\n        else\n          new ShioriJK.Headers.Response(headers)\n      else\n        new ShioriJK.Headers.Response()\n  # @property [ShioriJK.RequestLine] StatusLine Container\n  status_line: null\n  # @property [ShioriJK.Headers.Request] Headers Container\n  headers: null\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    @status_line.toString() + '\\r\\n' + @headers.toString() + '\\r\\n'\n\n# SHIORI Request Message's RequestLine Container\nclass ShioriJK.RequestLine\n  # initialize request line\n  # @param method [string] method\n  # @param protocol [string] protocol (default = 'SHIORI')\n  # @param version [string] version\n  constructor : ({method, protocol, version} = {}) ->\n    @arguments = {}\n    if method? then @method = method\n    @protocol = protocol || 'SHIORI' # for codo\n    if version? then @version = version\n  # @property [String] request method\n  method: null\n  # @property [String] protocol\n  protocol: null\n  # @property [String] version\n  version: null\n  @property\n    method :\n      get : -> @arguments.method\n      set : (method) ->\n        if method? and @version?\n          @validate_method_version method, @version\n        else if method?\n          switch method\n            when 'GET', 'NOTIFY', 'GET Version', 'GET Sentence', 'GET Word', 'GET Status', 'TEACH', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'TRANSLATE Sentence'\n            else\n              throw 'Invalid protocol method : ' + method\n        @arguments.method = method\n    protocol :\n      get : -> @arguments.protocol\n      set : (protocol) ->\n        if protocol? and protocol != 'SHIORI'\n          throw 'Invalid protocol : ' + protocol\n        @arguments.protocol = protocol\n    version :\n      get : -> @arguments.version\n      set : (version) ->\n        if @method? and version?\n          @validate_method_version @method, version\n        else if version?\n          switch version\n            when '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n            else\n              throw 'Invalid protocol version : ' + version\n        @arguments.version = version\n  # validate\n  # @param method [String] method name == 'SHIORI'\n  # @param version [Number] version\n  # @throw [String] if invalid\n  validate_method_version : (method, version) ->\n    is_valid = false\n    switch version\n      when '2.0'\n        switch method\n          when 'GET Version', 'NOTIFY OwnerGhostName', 'GET Sentence', 'GET Word', 'GET Status'\n            is_valid = true\n      when '2.2'\n        switch method\n          when 'GET Sentence'\n            is_valid = true\n      when '2.3'\n        switch method\n          when 'NOTIFY OtherGhostName', 'GET Sentence'\n            is_valid = true\n      when '2.4'\n        switch method\n          when 'TEACH'\n            is_valid = true\n      when '2.5'\n        switch method\n          when 'GET String'\n            is_valid = true\n      when '2.6' # spec is unknown\n        switch method\n          when 'GET Sentence', 'GET Status', 'GET String', 'NOTIFY OwnerGhostName', 'NOTIFY OtherGhostName', 'GET Version', 'TRANSLATE Sentence'\n            is_valid = true\n      when '3.0'\n        switch method\n          when 'GET', 'NOTIFY'\n            is_valid = true\n    unless is_valid\n      throw 'Invalid protocol method and version : ' + method + ' SHIORI/' + version\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    \"#{@method} #{@protocol}/#{@version}\"\n\n# SHIORI Response Message's StatusLine Container\nclass ShioriJK.StatusLine\n  # initialize status line\n  # @param code [number] status code\n  # @param protocol [string] protocol (default = 'SHIORI')\n  # @param version [string] version\n  constructor : ({code, protocol, version} = {}) ->\n    @arguments = {}\n    if code? then @code = code\n    @protocol = protocol || 'SHIORI' # for codo\n    if version? then @version = version\n  # @property [String] status code\n  code: null\n  # @property [String] protocol\n  protocol: null\n  # @property [String] version\n  version: null\n  @property\n    code :\n      get : -> @arguments.code\n      set : (code) ->\n        if code? and not @message[code]?\n          throw 'Invalid response code : ' + code\n        @arguments.code = code\n    protocol :\n      get : -> @arguments.protocol\n      set : (protocol) ->\n        if protocol? and protocol != 'SHIORI'\n          throw 'Invalid protocol : ' + protocol\n        @arguments.protocol = protocol\n    version :\n      get : -> @arguments.version\n      set : (version) ->\n        if version?\n          switch version\n            when '2.0', '2.2', '2.3', '2.4', '2.5', '2.6', '3.0'\n            else\n              throw 'Invalid protocol version : ' + version\n        @arguments.version = version\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    \"#{@protocol}/#{@version} #{@code} #{@message[@code]}\"\n  # @property [Hash<Number, String>] status messages for status codes\n  message:\n    200 : 'OK'\n    204 : 'No Content'\n    310 : 'Communicate'\n    311 : 'Not Enough'\n    312 : 'Advice'\n    400 : 'Bad Request'\n    418 : \"I'm a tea pot\"\n    500 : 'Internal Server Error'\n\n# SHIORI Message Headers Container\nclass ShioriJK.Headers\n  # initialize headers\n  # @param header [Hash<String, String>] headers\n  constructor : (@header = {}) ->\n  # @property [Hash<String, String>] headers\n  header: null\n  # get header\n  # @param name [String] header name\n  # @return [String] header value\n  get : (name) ->\n    if @header[name]?\n      @header[name]\n  # set header\n  # @param name [String] header name\n  # @param value [String] header value\n  # @return [String] header value\n  set : (name, value) ->\n    @header[name] = value\n  # get header separated by \\x01 or some as an array\n  # @param name [String] header name\n  # @param separator [String] separator characters\n  # @return [Array<String>] header values\n  get_separated : (name, separator = '\\x01') ->\n    if @header[name]?\n      @header[name].split separator\n  # set header separated by \\x01 or some as an array\n  # @param name [String] header name\n  # @param value [Array<String>] header values\n  # @param separator [String] separator characters\n  # @return [String] header value\n  set_separated : (name, value, separator = '\\x01') ->\n    @header[name] = value.join separator\n  # get header separated by \\x02 and \\x01 or some as an array\n  # @param name [String] header name\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [Array<Array<String>>] header values\n  get_separated2 : (name, separator1 = '\\x02', separator2 = '\\x01') ->\n    if @header[name]?\n      ((element.split separator2) for element in @header[name].split separator1)\n  # set header separated by \\x02 and \\x01 or some as an array\n  # @param name [String] header name\n  # @param value [Array<Array<String>>] header values\n  # @param separator1 [String] first level separator characters\n  # @param separator2 [String] second level separator characters\n  # @return [String] header value\n  set_separated2 : (name, value, separator1 = '\\x02', separator2 = '\\x01') ->\n    @header[name] = (element.join separator2 for element in value).join separator1\n  # check that headers are line feed free\n  # @throw [String] if not\n  validate : ->\n    for name, value of @header\n      if \"#{value}\".match /\\n/\n        throw 'Invalid header value - line feed found : [' + name + '] : ' + value\n  # Message to string\n  # @return [String] message string\n  toString : ->\n    str = ''\n    @validate()\n    for name, value of @header\n      str += \"#{name}: #{value}\\r\\n\"\n    str\n\n# SHIORI Request Message Headers Container\nclass ShioriJK.Headers.Request extends ShioriJK.Headers\n\n# SHIORI Response Message Headers Container\nclass ShioriJK.Headers.Response extends ShioriJK.Headers\n\n","ShioriJK.Shiori = {}\nShioriJK.Shiori.Header = {}\nShioriJK.Shiori.Request = {}\nShioriJK.Shiori.Request.RequestLine = {}\nShioriJK.Shiori.Request.Header = {}\nShioriJK.Shiori.Response = {}\nShioriJK.Shiori.Response.StatusLine = {}\nShioriJK.Shiori.Response.Header = {}\n\n# parser base class\nclass ShioriJK.Shiori.Parser\n  # @return [Boolean]\n  is_parsing : ->\n    not @section.is 'idle'\n  # @return [Boolean]\n  is_parsing_end : ->\n    not @section.is 'end'\n  # get parser result\n  # @return result\n  get_result : ->\n    @result\n  # build result container\n  # @abstract used by subclasses\n  # @return empty result container\n  result_builder : ->\n  # set section state to first section\n  # @throw [String] if before section != 'idle'\n  begin_parse : ->\n    unless @section.is 'idle'\n      throw 'cannot begin parsing because previous transaction is still working'\n    @result = @result_builder()\n    @section.next()\n  # set section state to begining section\n  # @throw [String] if before section != 'end'\n  end_parse : ->\n    unless @section.is 'end'\n      @abort_parse()\n      throw 'parsing was aborted'\n    @section.next()\n  # set section state to begining section FORCE!\n  # @note recursively abort parsing\n  abort_parse : ->\n    if @parsers?\n      for name, parser of @parsers\n        parser.abort_parse() if parser.abort_parse?\n    @section.set 'idle'\n  # parse a transaction\n  # @param transaction [String] complete transaction\n  # @return parse_chunk()'s one result\n  # @throw [String] if transaction is not complete\n  parse : (transaction) ->\n    @begin_parse()\n    result = @parse_chunk transaction\n    if @is_parsing()\n      throw 'transaction is not closed'\n    if result.results.length != 1\n      throw 'multiple transaction'\n    result.results[0]\n  # parse transaction chunk\n  # @param chunk [String] transaction chunk\n  # @return [Array] parse_lines()'s results\n  parse_chunk : (chunk) ->\n    lines = chunk.split /\\r\\n/\n    if chunk.match /\\r\\n$/\n      lines.pop()\n    @parse_lines lines\n  # parse chunk lines\n  # @param lines [Array<String>] transaction chunk separated by \\r\\n\n  # @return [Hash] {results: parse_line()'s result, state: parser state}\n  parse_lines : (lines) ->\n    results = []\n    for line in lines\n      result = @parse_line line\n      if result.state == 'end'\n        results.push result.result\n    results : results\n    state : result.state\n  # parse line\n  # @param line [String] transaction line separated by \\r\\n\n  # @return [Hash] {results: result (if state is end), state: parser state}\n  parse_line : (line) ->\n    if @section.is 'idle'\n      @begin_parse()\n    @parse_main line\n    if @section.is 'end'\n      @end_parse()\n      result : @get_result()\n      state : 'end'\n    else\n      state : 'continue'\n  # parser main routine\n  # @abstract implemented by subclasses\n  parse_main : (line) ->\n\n# parser section state manager\nclass ShioriJK.Shiori.Section\n  constructor : (@sections) ->\n    @index = 0\n  is : (section) ->\n    @sections[@index] == section\n  next : ->\n    if @index == @sections.length - 1\n      @index = 0\n    else\n      @index++\n  previous : ->\n    if @index == 0\n      @index = @sections.length - 1\n    else\n      @index--\n  set : (section) ->\n    @index = @sections.indexOf section\n  get : ->\n    @sections[@index]\n\nclass ShioriJK.Shiori.Header.Parser extends ShioriJK.Shiori.Parser\n  parse_main : (line) ->\n    result = @parse_header line\n    if result.state == 'end'\n      @section.next()\n  parse_header : (line) ->\n    if line.length\n      if result = line.match /^(.+?): (.*)$/\n        @result.header[result[1]] = result[2]\n      else\n        throw 'Invalid header line : ' + line\n      state : 'continue'\n    else\n      state : 'end'\n\nclass ShioriJK.Shiori.Header.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'header', 'end']) ->\n    @index = 0\n\n# SHIORI Request parser\nclass ShioriJK.Shiori.Request.Parser extends ShioriJK.Shiori.Parser\n  constructor : () ->\n    @parsers = {\n      request_line : new ShioriJK.Shiori.Request.RequestLine.Parser()\n      headers : new ShioriJK.Shiori.Request.Header.Parser()\n    }\n    @section = new ShioriJK.Shiori.Request.Section()\n  result_builder : ->\n    new ShioriJK.Message.Request(no_prepare: true)\n  parse_main : (line) ->\n    parser = @parsers[@section.get()]\n    parser_result = parser.parse_line line\n    if parser_result.state == 'end'\n      @result[@section.get()] = parser_result.result\n      @section.next()\n\nclass ShioriJK.Shiori.Request.RequestLine.Parser\n  constructor : () ->\n  result_builder : ->\n    new ShioriJK.RequestLine()\n  parse : (transaction) ->\n    @parse_chunk transaction\n  parse_chunk : (chunk) ->\n    @parse_line chunk\n  parse_line : (line) ->\n    result = line.match /^([A-Za-z0-9 ]+) SHIORI\\/([0-9.]+)/\n    unless result\n      throw 'Invalid request line : ' + line\n    @result = @result_builder()\n    @result.method = result[1]\n    @result.protocol = 'SHIORI'\n    @result.version = result[2]\n    result : @result\n    state : 'end'\n\nclass ShioriJK.Shiori.Request.Header.Parser extends ShioriJK.Shiori.Header.Parser\n  constructor : () ->\n    @section = new ShioriJK.Shiori.Request.Header.Section()\n  result_builder : ->\n    new ShioriJK.Headers.Request()\n\nclass ShioriJK.Shiori.Request.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'request_line', 'headers', 'end']) ->\n    @index = 0\n\nclass ShioriJK.Shiori.Request.Header.Section extends ShioriJK.Shiori.Header.Section\n\n# SHIORI Response parser\nclass ShioriJK.Shiori.Response.Parser extends ShioriJK.Shiori.Parser\n  constructor : () ->\n    @parsers = {\n      status_line : new ShioriJK.Shiori.Response.StatusLine.Parser()\n      headers : new ShioriJK.Shiori.Response.Header.Parser()\n    }\n    @section = new ShioriJK.Shiori.Response.Section()\n  result_builder : ->\n    new ShioriJK.Message.Response(no_prepare: true)\n  parse_main : (line) ->\n    parser = @parsers[@section.get()]\n    parser_result = parser.parse_line line\n    if parser_result.state == 'end'\n      @result[@section.get()] = parser_result.result\n      @section.next()\n\nclass ShioriJK.Shiori.Response.StatusLine.Parser\n  constructor : () ->\n  result_builder : ->\n    new ShioriJK.StatusLine()\n  parse : (transaction) ->\n    @parse_chunk transaction\n  parse_chunk : (chunk) ->\n    @parse_line chunk\n  parse_line : (line) ->\n    result = line.match /^SHIORI\\/([0-9.]+) (\\d+) (.+)$/\n    unless result\n      throw 'Invalid status line : ' + line\n    @result = @result_builder()\n    @result.protocol = 'SHIORI'\n    @result.version = result[1]\n    @result.code = result[2] - 0\n    result : @result\n    state : 'end'\n\nclass ShioriJK.Shiori.Response.Header.Parser extends ShioriJK.Shiori.Header.Parser\n  constructor : () ->\n    @section = new ShioriJK.Shiori.Response.Header.Section()\n  result_builder : ->\n    new ShioriJK.Headers.Response()\n\nclass ShioriJK.Shiori.Response.Section extends ShioriJK.Shiori.Section\n  constructor : (@sections = ['idle', 'status_line', 'headers', 'end']) ->\n    @index = 0\n\nclass ShioriJK.Shiori.Response.Header.Section extends ShioriJK.Shiori.Header.Section\n"],"sourceRoot":"/source/"}